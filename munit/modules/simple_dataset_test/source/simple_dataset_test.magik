#% text_encoding = iso8859_1
_package sw
$

#remex( :simple_dataset_test )
#$

def_slotted_exemplar( :simple_dataset_test,
	{
		{ :dataset,    _unset },
		{ :collection, _unset }
	},
	{ :test_case } )
$

#
# CREATION INFRASTRUCTURE
#

_pragma(classify_level=restricted)
_method simple_dataset_test.set_up()
	## 
	## 
	.dataset << _unset
	.collection << _unset 
_endmethod
$

_pragma(classify_level=restricted)
_private _method simple_dataset_test.create_dataset( config_spec )
	## 
	## 
	.dataset << simple_dataset.new( :test_dataset, config_spec )

	>> _self.assert_is( :test_dataset, .dataset.name )
_endmethod
$

_pragma(classify_level=restricted)
_private _method simple_dataset_test.create_dataset_with_collection( fields_spec )
	## 
	## 
	>> _if _self.create_dataset( property_list.new_with(
					     :test_collection,
					     fields_spec ) )
	   _then
		   .collection << .dataset.collections[ :test_collection ]
		   
		   >> _self.assert_not_unset( .collection, "No test collection found" )
	   _else
		   >> _false
	   _endif 
_endmethod
$

_pragma(classify_level=restricted)
_private _method simple_dataset_test.create_dataset_with_data_test_collection()
	## 
	## 
	>> _self.create_dataset_with_collection(
		    { property_list.new_with( :name, :field1,
					      :type, :ds_int,
					      :key?, _true ),
		      property_list.new_with( :name, :field2,
					      :type, :ds_string,
					      :size, 10,
					      :key?, _false )
		    } )
_endmethod
$

_pragma(classify_level=restricted)
_private _method simple_dataset_test.create_dataset_with_geom_test_collection()
	## 
	## 
	>> _self.create_dataset_with_collection(
		    { property_list.new_with( :name, :field1,
					      :type, :ds_int,
					      :key?, _true ),
		      property_list.new_with( :name, :geom1,
					      :type, :simple_point )
		    } )
_endmethod
$

#
# CUSTOM ASSERTIONS
#

_pragma(classify_level=restricted)
_method simple_dataset_test.assert_collection_size( expected_size )
	## 
	## 
	_self.assert_is( expected_size, .collection.size,
			 write_string( "Expected ",
				       expected_size,
				       " elements in the collection, got ",
				       .collection.size ) )
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.assert_collection_fields( key_field_names, phys_field_names, geom_field_names )
	## 
	##
	_self.int!assert_collection_fields( :key_field_names, key_field_names )
	_self.int!assert_collection_fields( :physical_field_names, phys_field_names )
	_self.int!assert_collection_fields( :geometry_field_names, geom_field_names )
_endmethod
$

_pragma(classify_level=restricted)
_private _method simple_dataset_test.int!assert_collection_fields( which_fields, expected_values )
	## 
	##
	_local expected_set << set.new_from( expected_values )
	_local actuals_set << set.new_from( .collection.perform( which_fields ) )

	_local extra_actuals << actuals_set.difference( expected_set )
	_local extra_expected << expected_set.difference( actuals_set )

	_self.assert_is ( 0, extra_actuals.size,
			  write_string( "Unexpected ",
					which_fields,
					":- ",
					extra_actuals.as_simple_vector().join_as_strings( %, ) ) )
	_self.assert_is ( 0, extra_expected.size,
			  write_string( "Missing ",
					which_fields,
					":- ",
					extra_expected.as_simple_vector().join_as_strings( %, ) ) )
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.assert_phys_field_properties( field_name, key?, value_class, _optional size )
	## 
	## 
	_if _self.assert_not_unset( fd << .collection.field( field_name ), write_string( "Didn't find ", field_name ) ) _andif
	    _self.assert_true( fd.is_physical?,
			       write_string( "Expected ", field_name, " to be physical but it wasn't" ) )
	_then
		_self.assert_is( key?, fd.is_key?,
				 write_string( "Expected key? for ",
					       field_name,
					       " to be ",
					       key?, ", got ", fd.is_key? ) )
		_self.assert_true( value_class.is_class_of?( fd.type.class ),
				   write_string( "Expected value class for ",
						 field_name,
						 " to be ",
						 value_class, ", got ", fd.type.class ) )
		_if size _isnt _unset 
		_then
			_self.assert_is( size, fd.type.size,
					 write_string( "Expected size for ",
						       field_name,
						       " to be ",
						       size, ", got ", fd.type.size ) )
		_endif
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.assert_geom_field_properties( field_name, geom_type )
	## 
	## 
	_if _self.assert_not_unset( fd << .collection.field( field_name ), write_string( "Didn't find ", field_name ) ) _andif
	    _self.assert_true( fd.is_geometry?,
			       write_string( "Expected ", field_name, " to be geometry but it wasn't" ) )
	_then
		_self.assert_is( geom_type, fd.geom_type,
				 write_string( "Expected geom_type for ",
					       field_name,
					       " to be :",
					       geom_type, ", got :", fd.geom_type ) )
	_endif 
_endmethod
$

#
# ACTUAL TESTS
#

_pragma(classify_level=restricted)
_method simple_dataset_test.test_create_empty_dataset()
	## 
	## 
	_if ( _self.create_dataset( property_list.new() ) )
	_then 
		_self.assert_is( 0, .dataset.collections.size )
	_endif 
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_create_no_fields_collection()
	## 
	##
	_if _self.create_dataset_with_collection( {} )
	_then
		_self.assert_collection_size( 0 )
		_self.assert_collection_fields( {}, {}, {} )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.int!test_create_one_key_field_collection( type, size, expected_class )
	## 
	##
	_local field_params <<
		property_list.new_with( :name,   :field1,
					:type,   type,
					:key?,   _true )
	_if size _isnt _unset 
	_then
		field_params[ :size ] << size
	_endif

	_if _self.create_dataset_with_collection( { field_params } ) _then
		_self.assert_collection_size( 0 )
		_self.assert_collection_fields( { :field1 }, { :field1 }, {} )

		_self.assert_phys_field_properties( :field1, _true, expected_class )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.define_one_key_field_test( type, size, expected_class_string )
	## 
	## 
	_local method_template <<
		write_string(
			"_proc()", newline_char,
			"        _self.int!test_create_one_key_field_collection( :#1, #2, #3 )", newline_char,
			"_endproc", newline_char )
	_local method_text << message_handler.format_text_with( method_template, { type, size, expected_class_string } )

	_self.define_method( :test_create_one_key_ + type + :_field_collection|()|, method_text.evaluate(), _false )
_endmethod
$

simple_dataset_test.define_one_key_field_test( :ds_int, _unset, "integer" )
$
simple_dataset_test.define_one_key_field_test( :ds_float, _unset, "float" )
$
simple_dataset_test.define_one_key_field_test( :ds_string, 10, "char16_vector" )
$
simple_dataset_test.define_one_key_field_test( :ds_date, _unset, "ds_date" )
$
simple_dataset_test.define_one_key_field_test( :date_time, _unset, "date_time" )
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_two_physical_fields_collection()
	## 
	## 
	_if _self.create_dataset_with_collection(
		    { property_list.new_with( :name, :field1,
					      :type, :ds_int,
					      :key?, _true ),
		      property_list.new_with( :name, :field2,
					      :type, :ds_float ) } )
	_then
		_self.assert_collection_size( 0 )
		_self.assert_collection_fields( { :field1 }, { :field1, :field2 }, {} )
		
		_self.assert_phys_field_properties( :field1, _true,  integer )
		_self.assert_phys_field_properties( :field2, _false, float )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.int!test_geom_field_collection( geom_type )
	## 
	## 
	_if _self.create_dataset_with_collection(
		    { property_list.new_with( :name, :field1,
					      :type, :ds_int,
					      :key?, _true ),
		      property_list.new_with( :name, :geom1,
					      :type, geom_type ) } )
	_then
		_self.assert_collection_size( 0 )
		_self.assert_collection_fields( { :field1 }, { :field1 }, { :geom1 } )
		
		_self.assert_phys_field_properties( :field1, _true,  integer )
		_self.assert_geom_field_properties( :geom1, geom_type )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.define_geom_field_collection_test( geom_type )
	## 
	## 
	_local method_template <<
		write_string(
			"_proc()", newline_char,
			"        _self.int!test_geom_field_collection( :#1 )", newline_char,
			"_endproc", newline_char )
	_local method_text << message_handler.format_text_with( method_template, { geom_type } )

	_self.define_method( :test_ + geom_type + :_geom_field_collection|()|, method_text.evaluate(), _false )
_endmethod
$

simple_dataset_test.define_geom_field_collection_test( :simple_point )
$
simple_dataset_test.define_geom_field_collection_test( :simple_chain )
$
simple_dataset_test.define_geom_field_collection_test( :simple_area )
$
simple_dataset_test.define_geom_field_collection_test( :text )
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_insert_one_record_increases_collection_size()
	## 
	## 
	_if _self.create_dataset_with_data_test_collection()
	_then
		_self.assert_collection_size( 0 )

		.collection.insert( { 1, "string" } )

		_self.assert_collection_size( 1 )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_inserted_record_can_be_retrieved()
	## 
	## 
	_if _self.create_dataset_with_data_test_collection()
	_then
		.collection.insert( { 1, "string" } )

		_local rec << .collection.an_element()

		_self.assert_is( 1, rec.field1 )
		_self.assert_equals( "string", rec.field2 )
	_endif
	
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_two_inserted_records_can_be_retrieved()
	## 
	##
	_local data << { { 1, "string" },
			 { 2, "another_string" } }
	_if _self.create_dataset_with_data_test_collection()
	_then
		_self.assert_collection_size( 0 )
		_for d _over data.fast_elements()
		_loop
			.collection.insert( d )
		_endloop

		_self.assert_collection_size( 2 )

		_local i << 1
		_for r _over .collection.fast_elements()
		_loop
			_self.assert_is( data[ i ][ 1 ], r.field1 )
			_self.assert_is( data[ i ][ 2 ], r.field2 )
			i +<< 1
		_endloop
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_cant_insert_duplicate_key()
	## 
	## 
	_if _self.create_dataset_with_data_test_collection()
	_then
		_local rec << .collection.insert( { 1, "string" } )
		_self.assert_not_unset( rec, "First insertion failed" )

		_local rec2 << .collection.insert( { 1, "different string" } )
		_self.assert_unset( rec2, "Second insertion successful" )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_can_retrieve_by_key()
	## 
	## 
	_local data << { { 1, "string" },
			 { 2, "another_string" } }
	_if _self.create_dataset_with_data_test_collection()
	_then
		_for d _over data.fast_elements()
		_loop
			.collection.insert( d )
		_endloop

		_local rec << .collection.at( 2 )
		_if _self.assert_not_unset( rec, "Failed to retrieve by key" )
		_then
			_self.assert_is( 2, rec.field1 )
			_self.assert_equals( "another_string", rec.field2 )
		_endif 
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_can_delete()
	## 
	## 
	_local data << { { 1, "string" },
			 { 2, "another_string" } }
	_if _self.create_dataset_with_data_test_collection()
	_then
		_self.assert_collection_size( 0 )
		_for d _over data.fast_elements()
		_loop
			.collection.insert( d )
		_endloop

		_self.assert_collection_size( 2 )

		_local rec << .collection.at( 2 )
		_if _self.assert_not_unset( rec )
		_then
			rec.delete()
			_self.assert_collection_size( 1 )

			rec2 << .collection.at( 2 )
			_self.assert_unset( rec2 )
		_endif
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_can_update()
	## 
	##
	_local data << { { 1, "string" },
			 { 2, "another_string" } }
	_if _self.create_dataset_with_data_test_collection()
	_then
		_for d _over data.fast_elements()
		_loop
			.collection.insert( d )
		_endloop
		_local rec << .collection.at( 2 )
		_if _self.assert_not_unset( rec )
		_then
			rec.field2 << "a different string"

			_local from_coll_rec << .collection.at( 2 )
			_self.assert_equals( "another_string", from_coll_rec.field2 )

			.collection.update( rec )

			from_coll_rec << .collection.at( 2 )
			_self.assert_equals( "a different string", from_coll_rec.field2 )
		_endif
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_can_associate_geometry()
	## 
	## 
	_local data << { { 1 },
			 { 2 } }
	_if _self.create_dataset_with_geom_test_collection()
	_then
		_for d _over data.fast_elements()
		_loop
			.collection.insert( d )
		_endloop

		_local rec << .collection.at( 2 )
		_if _self.assert_not_unset( rec )
		_then
			_self.assert_unset( rec.geom1 )

			geom << uds_simple_point.new_at( .collection.field( :geom1 ), coordinate.new( 0, 0 ) )
			rec.set_geometry( geom )

			_if _self.assert_not_unset( retrieved_geom << rec.geom1 )
			_then
				_self.assert_equals( 0, retrieved_geom.x )
				_self.assert_equals( 0, retrieved_geom.y )
			_endif 
		_endif 
	_endif
_endmethod
$

