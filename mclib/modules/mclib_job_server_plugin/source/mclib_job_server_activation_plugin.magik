#% text_encoding = iso8859_1
########################################################################
##
## Last Saved Time-stamp: <2008-03-03 13:02:00 Mike.Zimmerman>
##
## Created By: Kyle Oedewaldt and Mike Zimmerman
## Date: 03-03-2008
## Copyright 2008 Kyle Oedewaldt and Mike Zimmerman
##
## This file is part of Magik Components for SWAF.
##
## Magik Components for SWAF is free software; you can redistribute it and/or modify
## modify it under the terms of the GNU Lesser General Public
## License as published by the Free Software Foundation; either
## version 2.1 of the License, or (at your option) any later version.

## This library is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## Lesser General Public License for more details.

## You should have received a copy of the GNU Lesser General Public
## License along with this library; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
##
########################################################################
_package mclib
$

_pragma(classify_level=restricted, topic={job_server})
##
## A sub-class of the plug-in that handles the display of Job
## Server. 
##
def_slotted_exemplar(:mclib_job_server_activation_plugin,
	{},
	:job_server_activation_plugin)
$

_pragma(classify_level=restricted, topic={job_server})
mclib_job_server_activation_plugin.define_shared_constant( :message_accessor, message_handler.new(:mclib_job_server_plugin), :public )
$

_pragma(classify_level=restricted, topic={job_server})
_method mclib_job_server_activation_plugin.activate_dialog( )
	##
	## If framework isn't cached it is created, cached and then returned.
	## If it already exists, the framework is reactivated and returned.

	_local a_title << _self.message( :job_viewer_title )
	
	_if (d << _self.get_dialog(:job_server)) _is _unset
	_then
		# BEGIN MCLIB
		d << mclib_job_server_framework.new(a_title, _self,
											:resource_module_name,           _self.module_name,
											:config_definition_module_name, _self.module_name,
											:gui_definition_module_name, _self.module_name,
											:config_definition_file_name,   "viewer_config.xml",
											:gui_definition_file_name,      "viewer_gui.xml")
		# END MCLIB
		_self.cache_dialog(:job_server, d)
	_endif

	# set title before activation
	d.title << a_title
	top << d.activate()

	_return top
_endmethod
$

_pragma(classify_level=restricted, topic={job_server})
_method mclib_job_server_activation_plugin.activate_admin_dialog( )
	##
	## If framework isn't cached it is created, cached and then returned.
	## If it already exists, the framework is reactivated and returned.

	_local a_title << _self.message( :job_manager_title )

	_if (d << _self.get_dialog(:job_server_admin)) _is _unset
        _then
			# BEGIN MCLIB
			d << mclib_job_server_framework.new(a_title, _self,
												:resource_module_name,           _self.module_name,
												:config_definition_module_name, _self.module_name,
												:gui_definition_module_name, _self.module_name,
												:config_definition_file_name,   "config.xml",
												:gui_definition_file_name,      "gui.xml")
			_self.cache_dialog(:job_server_admin, d)
			# END MCLIB
	_endif

	# set the title before activation
	d.title << a_title

	top << d.activate()

	_return d
_endmethod
$
