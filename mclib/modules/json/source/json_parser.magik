#% text_encoding = cp1252
_package sw
$
_pragma(classify_level=basic)
## a JSON parser that reads a JSON string and converts it into
## relevant data types in Magik (e.g., jason_object,
## jason_array, and other basic Magik types).
def_slotted_exemplar(:mclib_json_parser,{},{})
$


_pragma(classify_level=basic)
mclib_json_parser.define_shared_variable(
	:debug_mode?,
	_false,
	:public)
$

_pragma(classify_level=basic)
mclib_json_parser.define_shared_constant(
	:forward_character_vec,
	{
		space_char,
		newline_char,
		tab_char
	},
	:public)
$

_pragma(classify_level=restricted)
_private _method mclib_json_parser.fastforward_white_space(json_stream)
	## fastforward_white_space(internal_text_input_stream JSON_STREAM) : _unset
	##
	## fastforward to the next non-space, non-newline and non-tab character.

	l_char_vec << _self.forward_character_vec
	_loop
		# Uli Naedelin
		# newline and tab characters are also handled as forward
		# characters 
		_if _not l_char_vec.includes?(json_stream.peek())
		_then 
			_leave
		_endif

		_if json_stream.get() _is _unset 
		_then
			_leave
		_endif
	_endloop
_endmethod
$
_pragma(classify_level=basic)
_method mclib_json_parser.parse_stream(a_text_stream)
	## parse_stream(text_input_stream A_TEXT_STREAM) : json_object
	##
	## parses A_TEXT_STREAM to return a json_object

	_return _self.get_json_value(a_text_stream)
_endmethod
$
_pragma(classify_level=basic)
_method mclib_json_parser.parse_string(a_json_string)
	## parse_string(string A_JSON_STRING) : json_object
	##
	## parses A_JSON_STRING to return a json_object

	_local str << internal_text_input_stream.new(a_json_string)
	_return _self.get_json_value(str)
_endmethod
$
_pragma(classify_level=basic)
_method mclib_json_parser.parse_file(a_filename)
	## parse_file(string A_FILENAME) : json_object
	##
	## parses A_JSON_STRING to return a json_object

	_local str << external_text_input_stream.new(a_filename)
	_local obj
	
	_protect
		obj << _self.get_json_value(str)
	_protection
		str.close()
	_endprotect

	_return obj
_endmethod
$

_pragma(classify_level=basic)
_method mclib_json_parser.parse_file_newline_delimiter(a_filename)
	## parse_file_with_line_delimiter(string A_FILENAME) : rope(json_object)
	##
	## parses A_JSON_STRING to return a rope of json_objects

	_local a_stream << external_text_input_stream.new(a_filename)
	_local a_rope << rope.new()

	_protect
		_loop
			a_line << a_stream.get_line()
			_if a_line _is _unset 
			_then
				_leave
			_endif
			a_obj << _self.parse_string(a_line)
			a_rope.add_last(a_obj)
		_endloop
	_protection
		a_stream.close()
	_endprotect

	_return a_rope
	
_endmethod
$



_pragma(classify_level=restricted)
_private _method mclib_json_parser.get_json_value(json_stream)
	## get_json_value(internal_text_input_stream JSON_STREAM) : object
	##
	## returns a suitable JSON value.  One of:
	##   - string
	##   - number
	##   - json_object
	##   - json_array
	##   - _true
	##   - _false
	##   - _unset

	_self.fastforward_white_space(json_stream)

	_local token << json_stream.peek()

	_if token _is %"
	_then
		_return _self.get_json_string(json_stream)
	_elif token _is %{
	_then
		_return _self.get_json_object(json_stream)

	_elif token _is %[
	_then
		_return _self.get_json_array(json_stream)

	_elif token _is %t
	_then
		json_stream.get_n(4)
		_return _true
		
	_elif token _is %f
	_then
		json_stream.get_n(5)
		_return _false
		
	_elif token _is %n
	_then
		json_stream.get_n(4)
		_return _unset

	_else
		_return _self.get_json_number(json_stream)
	_endif
_endmethod 
$
_pragma(classify_level=restricted)
_private _method mclib_json_parser.get_json_string(json_stream)
	## get_json_string(internal_text_input_stream JSON_STREAM) : string
	##
	## returns the JSON string
	
	_local a_stream << internal_text_output_stream.new()
	
	_local token << json_stream.get()

	_if token _isnt %"
	_then
		_return _unset 
	_endif
	
	_loop
		_if (token << json_stream.get()) _is _unset
		_then
			_leave
		_endif

		_if token _is %\
		_then
			_local peek_token << json_stream.peek()

			_if peek_token = %"
			_then
				token << json_stream.get()

			_elif peek_token = %n 
			_then
				json_stream.get()
				token << newline_char
				
			_elif peek_token = %t 
			_then
				json_stream.get()
				token << tab_char
			_endif
		_elif token _is %"
		_then
			_leave
		_endif
		
		a_stream.write(token)
	_endloop

	_return a_stream.string
_endmethod
$
_pragma(classify_level=restricted)
_private _method mclib_json_parser.get_json_number(json_stream)
	## get_json_number(internal_text_input_stream JSON_STREAM) :number
	##
	## returns a number

	_local a_stream << internal_text_output_stream.new()

	_local peek_token 
	_local token

	_loop
		peek_token << json_stream.peek()

		_if {%space , %, , %] , %}}.includes?(peek_token)
		_then
			_leave
		_endif

		_if (token << json_stream.get()) _is _unset 
		_then
			_leave
		_endif

		a_stream.write(token)
	_endloop

	_return a_stream.string.as_number()
_endmethod
$
_pragma(classify_level=restricted)
_private _method mclib_json_parser.get_json_object(json_stream)
	## get_json_object(internal_text_input_stream JSON_STREAM) : json_object
	##
	## returns the JSON string
	
	_local a_stream << internal_text_output_stream.new()
	
	_local token << json_stream.get()

	_if token _isnt %{
	_then
		_return _unset 
	_endif

	_if _self.debug_mode?
	_then 
		l_temp_result << ""
	
		l_temp_result +<< token
	_endif 

	_local return_value << json_object.new()
	_local name , value

	_loop
		_self.fastforward_white_space(json_stream)
		
		name << _self.get_json_string(json_stream)
		
		_self.fastforward_white_space(json_stream)

		# step past the ':' character
		json_stream.get()

		_self.fastforward_white_space(json_stream)

		return_value[name] << _self.get_json_value(json_stream)

		_self.fastforward_white_space(json_stream)
		
		_if json_stream.peek() _is %}
		_then
			json_stream.get()
			_leave
		_endif

		# step past the ',' character
		l_next_char << json_stream.get()
		# Uli Naedelin
		# Raise condition in case json_stream contains unexpected json
		# structure. Previously the process would hang in an endless loop
		#
		
		_if l_next_char _is _unset
		_then
			_if l_temp_result _is _unset
			_then
				l_temp_result << "Set mclib_json_parser.debug_mode? = _true to get debug information"
			_endif
			condition.raise(:error,
					:string,
					write_string("Unexpected syntax for creating JSON Object. Expected last character '}'. Debug info: ",
						     l_temp_result
					)
				  )					
					
			_return _unset 
		_endif

	_endloop

	_return return_value
_endmethod 
$
_pragma(classify_level=restricted)
_private _method mclib_json_parser.get_json_array(json_stream)
	## get_json_array(internal_text_input_stream JSON_STREAM) : json_array
	##
	## returns the JSON array
	
	_local a_stream << internal_text_output_stream.new()
	
	_local token << json_stream.get()

	_if token _isnt %[
	_then
		_return _unset 
	_endif


	_if _self.debug_mode?
	_then 
		l_temp_result << ""
		
		l_temp_result +<< token
	_endif 
	
	_local return_value << json_array.new()
	_local value

	_loop
		_self.fastforward_white_space(json_stream)

		return_value.add_last(_self.get_json_value(json_stream))

		_self.fastforward_white_space(json_stream)

		_if json_stream.peek() _is %]
		_then
			json_stream.get()
			_leave
		_endif

		# step past the ',' character
		l_next_char << json_stream.get()
		# Uli Naedelin
		# Raise condition in case json_stream contains unexpected json
		# structure. Previously the process would hang in an endless loop
		#
		
		_if l_next_char _is _unset
		_then
			_if l_temp_result _is _unset
			_then
				l_temp_result << "Set mclib_json_parser.debug_mode? = _true to get debug information"
			_endif
			condition.raise(:error,
					:string,
					write_string("Unexpected syntax for creating JSON Array. Expected last character ']'. Debug info: ",
						     l_temp_result
					)
				  )					
			
			_return _unset 
		_endif
		
	_endloop

	_return return_value
_endmethod 
$
