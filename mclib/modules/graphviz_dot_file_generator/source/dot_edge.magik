#% text_encoding = cp1252
_package sw
$
########################################################################
##
## Created By: Alfred Sawatzky
## Date: Dec 9, 2009
## Copyright 2009 Alfred Sawatzky
##
########################################################################

_pragma(classify_level=basic)
## a edge in the Graphviz DOT language.
def_slotted_exemplar(:dot_edge,
      {
	      {:id_list,_unset},
	      {:parent,_unset}
      },
      {:dot_attribute_list}
)
$
dot_edge.define_slot_access(:id_list,:read,:private)
$
dot_edge.define_slot_access(:parent,:read,:private)
$
_pragma(classify_level=basic)
_method dot_edge.new(id_list,parent)
	## new(ordered list of strings ID_LIST,
	##     dot_container PARENT) : dot_edge
	##
	## creates a new clone of self

	_return _clone.init(id_list,parent)
_endmethod
$
_pragma(classify_level=restricted)
_private _method dot_edge.init(id_list,parent)
	## init(ordered list of strings ID_LIST,
	##      dot_container PARENT) : dot_edge
	##
	## initialises self

	_super.init()

	.id_list  << id_list.map(_proc(id)
					 id << id.write_string
					 
					 >> _if (id.includes?(space_char) _orif
						 id.includes?(%/) _orif
						 id.includes?(%\) _orif
						 id.includes?(%.) _orif
						 id.includes?(%-)) _andif
						id.first _isnt %"
					    _then
						    >> write_string(%",id,%")
					    _else
						    >> id
					    _endif
				 _endproc)

	.parent   << parent
	
	_return _self 
_endmethod
$
_pragma(classify_level=restricted)
_method dot_edge.write_on(a_stream,_optional indent_level)
	## write_on(text_output_stream A_STREAM) : _unset
	##
	## writes the information for self on A_STREAM 

	_local delimiter << "->"

	a_stream.write(space_char * indent_level.default(0))
	a_stream.write_list_with_separator(.id_list,delimiter)
	a_stream.write(" ")

	# now write the attribute information
	_super.write_on(a_stream)

	a_stream.write(";")
_endmethod
$
