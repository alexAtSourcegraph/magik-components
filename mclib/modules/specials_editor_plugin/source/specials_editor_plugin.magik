#% text_encoding = iso8859_1
########################################################################
##
## Created By: David Little
## Date: 04-07-2005
## Copyright 2005 David Little
##
## This file is part of Magik Components for SWAF.
##
##     Magik Components for SWAF is free software; you can redistribute it and/or modify
##     it under the terms of the GNU General Public License as published by
##     the Free Software Foundation; either version 2 of the License, or
##     (at your option) any later version.
##
##     Magik Components for SWAF is distributed in the hope that it will be useful,
##     but WITHOUT ANY WARRANTY; without even the implied warranty of
##     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##     GNU General Public License for more details.
##
##     You should have received a copy of the GNU General Public License
##     along with Foobar; if not, write to the Free Software
##     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
########################################################################
_package mclib
$

## specials_editor_plugin 
## Plugin to add and manage special actions included dependency on datatabase
##
## Implementation - 
##   Define new editor_plugin exemplar that inherit @mclib:specials_editor_plugin
##   Define action_definitions for new editor_plugin
##   Implement appropriate methods for new editor_plugin action_definitions
##   Subclass .manage_actions() and enable/disable actions as needed

_pragma(classify_level=basic, topic={rwo_specials})
## Plugin for rwo_specials actions 
# (04-07-2005 David Little, GeoSpatial Innovations, Inc.): created.
def_slotted_exemplar(:specials_editor_plugin,
{
	{:collection, _unset}
},
:editor_plugin)
$

_pragma(classify_level=restricted, topic={rwo_specials})
_method specials_editor_plugin.current_object
	## Returns Editor's current_object
	# (04-07-2005 David Little, GeoSpatial Innovations, Inc.): created.
	
	_return _self.editor.current_object
_endmethod
$

_pragma(classify_level=basic, topic={rwo_specials}, usage={subclassable})
specials_editor_plugin.define_shared_constant( :action_definitions,
					       ## None
					       ## Subclass this and define Actions (sw_action_def)
					       # (04-07-2005 David Little, GeoSpatial Innovations, Inc.): created.
					       {
					       },
					       :public )
$

_pragma(classify_level=restricted, topic={rwo_specials})
specials_editor_plugin.define_shared_constant( :databus_consumer_data_types,
					       ## Consumes :current_object, :collection
					       # (04-07-2005 David Little, GeoSpatial Innovations, Inc.): created.
					       { :current_object,
						 :collection
					       },
					       :public )
$

_pragma(classify_level=restricted, topic={rwo_specials})
_method specials_editor_plugin.sw_databus_data_available( data_type_name, data )
	## Manage Actions
	# (04-07-2005 David Little, GeoSpatial Innovations, Inc.): created.

	_super.sw_databus_data_available(data_type_name, data)

	# Disable/Enable Actions
	_self.manage_actions()
_endmethod
$

_pragma(classify_level=basic, topic={rwo_specials}, usage={subclassable})
_method specials_editor_plugin.manage_actions()
	## Does Nothing - 
	## Subclass and enable/disable defined Actions
	# (04-07-2005 David Little, GeoSpatial Innovations, Inc.): created.

_endmethod
$

_pragma(classify_level=basic, topic={rwo_specials}, usage={subclassable})
_method specials_editor_plugin.note_change(  who, aspect, _gather data )
	## Change  notification
	## Handles:
	##  sw_database observer notifications
	# (04-07-2005 David Little, GeoSpatial Innovations, Inc.): created.

	_if aspect = :mode 
	_then _self.manage_actions()
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={rwo_specials})
_method specials_editor_plugin.init( name, a_framework, _optional properties )
	## Initialises slots and dependencies.
	# (04-07-2005 David Little, GeoSpatial Innovations, Inc.): created.
	
	_super.init( name, a_framework, _scatter properties )

	.collection << _self.editor.collection
	.collection.dataset.add_dependent( _self, :mode, :view )

	_self.manage_actions()
	
	>> _self
	
_endmethod
$
