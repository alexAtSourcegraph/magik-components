:about_dialog_designer	About Dialog Designer ...
:activate_below         Below
:activate_cascade	Cascade
:activate_front		In Front
:activate_right         Right
:activation_position_tt 	Activation Position
:add_action		Add Action
:add_button		Add Button
:add_category		Add Category
:add_menu		Add Menu
:add_pane		Add Pane
:add_progressbar_pane	Add Progress Bar
:add_pulldown		Add Pulldown
:add_section		New Section
:add_separator		Add Separator
:add_stack_window		Add window to stack
:add_sub_category		Add Sub-Category
:add_submenu		Add Pullout Menu
:add_tab			Add tab
:add_to_list		Add to list -->
:add_to_requires		<-- Add
:add_toolbar		New Toolbar
:alerts?			Show Alerts?
:allow_overwrite?		Allow Overwrites?
:app			App :
:app_consumed_data_types	App CONSUMED Data Types
:app_produced_data_types	App PRODUCED Data Types
:auto_date_code?                Auto Date Code?
:auto_date_suppressed           See File Date.
:auto_generated
	#### 
	####  Auto-generated by Dialog Designer v#2 : #1
:auto_generated_magik_file_header
##% text_encoding = iso8859_1
#### 
####  Auto-generated by Dialog Designer v#4
####  on #1
####
####  System.user_name = #2
####

_package #3
$
:bad_base_class     The 'Base Class' must start with a letter and 
cannot contain the words 'plugin' or 'framework'.

:bad_base_path	  The 'Path' property (#1) set on the 'Module' tab is invalid.
:bad_word_launch
Documentation file cannot be auto-opened.

#1

Try starting MS Word first, then opening the file from there.
:bar_progress_indicator
	_self.install_progress_indicator(
                  "progress", _self,
                  :indicator, #1,
                  :max_count, #2,
                  :interrupt_message, :|interrupt_progressbar()|,
                  :progress_aspect, :progressbar_change,
                  :stop_aspect, :progressbar_end )

:base_class_def			Class Properties
:base_outlook_category_name	Category
:base_outlook_sub_category_name	Sub
:begin_loading_module
####################################################################
## 
## Loading Module (#1) 
##
####################################################################

:begin_loading_module_definition
####################################################################
## 
## Loading Module Definition (#1 @ #2) 
##
####################################################################
:body_plugin_activate_dialog|()|
	####
	####  Activate & cache the '#1' GUI.
	####
	_local d,name

	name << :#1

	_if (d << _self.get_dialog(name)) _is _unset 
	_then
		d << #1_framework.new(_self.message(:title),_unset)

		_self.cache_dialog(name,d)
	_endif

	d.maximizable? << #2
	d.minimizable? << #3
	d.resizable?   << #4

	d.activate(_unset,_self.message(name))
	
	d.component(name).items[:application] << _self.application

	>> d

:body_plugin_build_gui|()|
	_local d,a_panel
	
	d << #1_framework.new(_self.message(:framework_title),_self.framework)

	a_panel << d.build_gui(a_frame,xml_element)
	d.tab_label << _self.message(:tab_title)
	
	>> a_panel

:body_plugin_init_actions|()|
	_self.add_action(
		sw_action.new(
			:activate_dialog,
			:caption,         _self.message(:caption),
			:short_help_text, _self.message(:short_help_text),
			:engine,          _self,
			:image,           {:#1,_self.module_name},
			:action_message,  :|activate_dialog()|
			  ) )

:build				Module
:build_and_activate		Generate / Activate
:build_module			Generate Code
:build_module_def			Module Properties
:build_module_description		Description
:build_module_description_default	Module Description?
:build_module_name	        	Name/Version
:build_module_name_default      	new_module_name    410
:build_module_requires		Requires
:build_module_requires_default
:busy_progress_indicator
	_self.install_progress_indicator(
                  "progress", _self,
                  :indicator, #1,
                  :interrupt_message, :|interrupt_progressbar()|,
                  :progress_aspect, :progressbar_change,
                  :stop_aspect, :progressbar_end )
:button_item		Text Button

:canvas			Canvas
:change_to_tab		Change to tab ...
:class_msg_txt_not_found   '#1' not found.  
:code			Magik / XML
:copy_element		Copy
:copy_image_files		Copy images files into '#1' module
:cut_element		Cut

:databus			Databus
:dd_colour_choice
	_self.add_action(sw_action.new( :#1,
					:caption, "",
					:image, { :line_colour_dynamic, :style_widgets },
					:tooltip, "#4",
					:engine, _self,
					:value, colour.new_rgb(1.0, 0.600, 0 ),
					:value_change_message, { :#2|()|, :#3 },
					
					:dialog_control, { :colour_choice_item,
							   :allow_no_value?, _false ,
							   :allow_custom_colours?, _true },
					
					:toolbar_control, { :colour_choice_button_item,
							    :allow_no_value?, _true }
				   ) )
:dd_colour_choice_tt	Colour
:dd_dash_pattern_tt	Dash Pattern
:dd_date_time_default_aspect_method
	#### 
	####  Generate single cell tabular list

	_if .items.includes_key?(:#2_value)
        _then
                old_val << .items[:#2_value]
        _else
                old_val << #1.now()
        _endif	

	_local l_list << rope.new()
	_local l_styled_string << styled_string.new(:value, :when)
	
	_local l_dp << display_tree.new(1,property_list.new_with(:when,old_val) )
	l_dp.styled_string << l_styled_string
	l_list.add(l_dp)
	
	>> l_list

:dd_date_time_gui_code	,
		:model,	_self,
		:aspect,	:|#1|,
		:col,	#2,
		:col_alignment,	:#3,
		:column_headings,	{},
		:cell_selection?,_true,
		:visible_rows,	1,
		:row,	#4,
		:row_alignment,  :#5,
		:editors, {{:when, in_place_#6_editor}},
		:mode,	:one,
		:min_width,	#7,
		:value_changed_notifier, :|#8|)

:dd_date_time_item	Date Time
:dd_date_time_set_value_code
	#### 
	####  Set the date value in the tree_item
	####
      	
	.items[:#1_value] << new_val

        _self.changed(:#1_aspect, :refresh)
        
	.items[:#1].selection.empty()

:dd_date_time_value_changed_code
	#### 
	####  Default code to run when value is changed by code.

        (a_display_tree, what, new_value, old_value, editor) << (_scatter args)

        _self.#1_value << new_value


:dd_date_time_value_code
	#### 
	####  Return the date value from the tree_item

	>> .items[:#1].tree_manager.data.an_element().value[:when]

:dd_default_method_code
	_self.dd_default_method("#1.#2")

:dd_default_method_code_alert
	####
	####  General default method showing CLASS.METHOD and passed ARGS in
	####  an alert box.

	msg << write_string("Auto-generated : ",args[1])

	_if args.size > 1
	_then 
		msg +<< write_string(%newline,args.size-1," parameter(s) passed:")
 	_endif 

	_for i _over 2.upto(args.size)
	_loop 
		msg +<< write_string(%newline,"         ",args[i])
	_endloop

	_self.show_alert(msg)

:dd_default_method_code_no_alert
	####
	####  General default method writing CLASS.METHOD and passed ARGS to
	####  the Magik> prompt.

	msg << write_string("Auto-generated : ",args[1],%newline)

	_if args.size > 1
	_then 
		msg +<< write_string(%newline,args.size-1," parameter(s) passed:")
 	_endif 

	_for i _over 2.upto(args.size)
	_loop 
		msg +<< write_string(%newline,"         ",args[i])
	_endloop

	write(%newline,"-"*80,%newline,msg)


:dd_documentation		Documentation

:dd_drafting_point_style_items
	#### 
	####  Generate the choice items for the point_style selector.
	####
	####  ... just return the drafting point styles ...

	v << gis_program_manager.databases.an_element()

	style_view << gis_program_manager.style_view
	style_table << style_view.collections[:sw_gis!rwo_style]
	style_items << rope.new()

	i << 0
	_loop
		fd << :point_ + (i+<<1).write_string.as_symbol()
		st << style_table.at(:default,:drafting_points,fd,:normal,"auto",0)

		_if st _is _unset _then _leave _endif

		style_items.add_last({st,st.as_raster_image()})
	_endloop

	>> style_items

:dd_failed_value_method
	#### 
	####  Responds to a user entry failing the validation criteria.   The first
	####  argument is either :correct or :alert, the rest are the key to the entry
	####  widget, the numeric_value_manager and the raised condition.
	####
	####  :correct --> correct the value so it is at least valid (the mid-value 
	####  of the defined interval or one (1) if no interval is defined).  
	####  :alert --> show an alert box describing the data entry entry problem.
	####  

	(how,widget_id,val_manager,cond) << (_scatter args)

	_if how _is :alert
	_then
		_self.show_alert(cond.data[2])
		.items[widget_id].set_focus()
	_else
                val << cond.data[6].data[:value]

		_if (v_int << val_manager.valid_interval) _isnt _unset
		_then 
		         val << (v_int.lower_bound + v_int.upper_bound) / 2.0
			
			_if val_manager.integer? 
			_then
				val << val.floor
			_endif 
		_else
			val << 1
		_endif

		.items[widget_id].value << val
	_endif

:dd_fill_percentage_tt	Fill Percentage
:dd_group_box		Group Box
:dd_hatch_pattern_tt		Hatch Pattern
:dd_insert_external_action
	_if (app << smallworld_product.applications.an_element()) _isnt _unset _andif
##	_if (app << _self.application) _isnt _unset _andif
		(pi << app.plugin(:#2)) _isnt _unset _andif 
		(act << pi.action(:#3)) _isnt _unset 
	_then 
		res << act.place_control_on(#1,:dialog,:row,#5,:col,#6,:has_border?,_#4)
		res.row << #5
		res.col << #6
		res.col_alignment << :left
		res.row_alignment << :top
	_endif


		
:dd_insert_external_plugin
	_if (app << smallworld_product.applications.an_element()) _isnt _unset _andif
##	_if (app << _self.application) _isnt _unset _andif
		(pi << app.plugin(:#2)) _isnt _unset 
	_then 
		res << pi.build_gui(#1)
		res.row << #5
		res.col << #6
	_else 
		res << #2.build_gui(#1)
		res.row << #5
		res.col << #6		
	_endif 

:dd_line_end_style_tt	End Style
:dd_line_join_style_tt	Join Style
:dd_line_width_choice
	_self.add_action(sw_action.new( :#1,
					:caption, "",
					:image, { :line_width_dynamic, :style_widgets },
					:tooltip, "#3",
					:engine, _self,
					:value, 3,
					:value_change_message, { :set_style_value|()|, :#2 },
					
					:dialog_control, { :#2_choice_item,
							   :allow_mm_widths?, _true},
					
					:toolbar_control, { :#2_choice_button_item }
				) )

:dd_line_width_tt 	Line Width
:dd_number_input		Number Input
:dd_open_file
	#### 
	####  Activate the file or directory selector.

	write(%newline,"-"*80)
	write("#1.#2")

	_self.file_selector(:#4).activate()
_endmethod
$

_pragma(classify_level=restricted, usage={redefinable})
_method #1.file_selector(which)
	#### 
	####  Auto-generated by Dialog Designer v#6 : #3
	#### 
	####  Create a file selector of type WHICH (:save, :save_as or :open)

	_if .items[:file_selector] _is _unset 
	_then
		dir << sw_module_manager.module(_self.module_name).safe_full_directory
		
		.items[:file_selector] <<
			file_dialog.new(_self,:|int!load_from_file()|,:class_name,
					:filter,"#5",
					:directory, dir)
	_else
		.items[:file_selector].directory << .items[:file_selector_dir]
	_endif

	fs << .items[:file_selector]
	fs.operation << which	

	fs.ok_message << :|int!select_file_dir()|

	_if which _is :select_directory
	_then 
		fs.title << _self.message(:select)
	_elif which _is :save_as
	_then
		fs.title << _self.message(:save)
	_else
		fs.title << _self.message(which)
	_endif

	>> .items[:file_selector]
_endmethod
$

_pragma(classify_level=restricted, usage={redefinable})
_method #1.int!select_file_dir(filename)
	#### 
	####  Auto-generated by Dialog Designer v#6 : #3
	#### 
	####  Select file or dir FILENAME.

	## Save the diretory we are loading from.
	.items[:file_selector_dir] << filename

	write(%newline,"-"*80)
	write("#2.int!select_file_dir() --> ",%',filename,%'," selected.")

:dd_outlook_bar		Outlook Bar
:dd_paned_window		Paned Window
:dd_point_style_choice
	_self.add_action(sw_action.new( :#1,
					:caption, "",
					:image, { :image_choice_item, :style_widgets },
					:tooltip, "#3",
					:engine, _self,
					:value_change_message, { :set_style_value|()|, :point_style },
					
					:dialog_control, { :image_choice_item },
					
					:toolbar_control, { :image_choice_button_item }
				) )


:dd_point_style_tt	Point Style
:dd_release_notes		Release Notes
:dd_select_directory
	#### 
	#### Select a system path.

	_if .items[:select_path] _is _unset 
	_then
		.items[:select_path] << select_path.new_dialog(_self,:|int!set_path()|,"Select Path ...")
	_else
		.items[:select_path].activate()
	_endif
_endmethod
$


_pragma(classify_level=restricted)
_method #2.int!set_path(dir)
	#### 
	#### Store the module path based on user input.

	.items[:directory_path]  << dir

	write(%newline,"-"*80)
	write("#2.int!set_path() --> ",%',dir,%'," selected.")



:dd_style_choice
	_self.add_action(sw_action.new( :#1,
					:caption, "",
					:image, { :#2_dynamic, :style_widgets },
					:tooltip, "#3",
					:engine, _self,
					:value_change_message, { :set_style_value|()|, :#2 },
					
					:dialog_control, { :#2_choice_item},
					
					:toolbar_control, { :#2_choice_button_item }
				) )

:dd_tab_box		Tab Box
:dd_tabular_list 	Tabular List
:dd_tabular_list_default_aspect_method
	#### 
	####  SAMPLE tabular list code ...

	tab_list << rope.new()

	## Generate 10 rows of random data
	r26 << random.new(26)
	r4 << random.new(4)
	alpha << "abcdefghijklmnopqrstuvwxyz"

	_for i _over 1.upto(10)
	_loop
		vals << {}.new(#1)

		## For each row, generate a random string for each column
		_for c _over 1.upto(#1)
		_loop 
			str << ""
			_for j _over 1.upto(r4.get()+1)
			_loop
				str +<< alpha[r26.get()+1]
			_endloop

			vals[c] << str
		_endloop 

		## Set the row of data for the table
		ds << display_tree.new(i,vals)

		## Specify how the data will be displayed
		ds.styled_string << #2

		## Add the row to the list
		tab_list.add_last(ds)		
	_endloop

	>> tab_list


:dd_tree_list_default_aspect_method
	#### 
	####  SAMPLE tree list code ...

	a_list << rope.new()
	
	_local idx << 0
	
	dt << display_tree.new(idx+<<1,property_list.new_with(:name,"Root 1"))

	dt.styled_string << {:image, {:area,:ui_resources}, :value, :name}

	st << display_tree.new(idx+<<1,property_list.new_with(:name,"Sub 1-1"),dt)
	st.styled_string << {:image, {:close,:ui_resources},:value, :name}
	
	a_list.add(dt)
	
	dt << display_tree.new(idx+<<1,property_list.new_with(:name,"Root 2"))
	dt.styled_string << {:image, {:point,:ui_resources}, :value, :name}

	st << display_tree.new(idx+<<1,property_list.new_with(:name,"Sub 2-1"),dt)
	st.styled_string << {:value, :name}

	st2 << display_tree.new(idx+<<1,property_list.new_with(:name,"Sub 2-2"),dt)
	st2.styled_string << {:value, :name}
	
	sst << display_tree.new(idx+<<1,property_list.new_with(:name,"Sub 2-2-1"),st2)
	sst.styled_string << {:image, {:chain,:ui_resources}, :value, :name}
	
	a_list.add(dt)

	>> a_list
:dd_webpage		Download Website
:dd_window_stack		Window Stack
:default_method_code
	_self.dd_default_method("#1.#2",_scatter args)

:default_product_def
default_product layered_product

title
	Auto-generated default product (Dialog Designer)
end

:default_rc
	#1 << rowcol.new(	
		#2,_unset,1,:pixel,	
		:style, 	:nested,	
		:default_col_alignment, 	:fill,
		:default_row_alignment, 	:fill,
		:resize?,	_true)

:defined_module_filter_label	Filter :
:defined_module_filter_tt		Type letter combination to filter list below ...
:defined_modules			#1 of #2 defined modules
:delete_container    Remove only this Container
:delete_current_dialog?		Closed dialogs are not deleted but must be re-opened to be viewed and edited.
 
Do you want to close this dialog design?   [ #1 ]
:delete_dialog			Close Dialog Design
:delete_element			Delete
:delete_menubar			Delete Menubar
:delete_pane			Delete Pane
:delete_stack_window		Delete this stacked window
:delete_statusbar			Delete Statusbar
:delete_tab			Delete current tab
:dialog			     	Dialog
:dialog_class			Base Class
:dialog_class_default		default_class
:dialog_class_list		Class list
:dialog_consumed_data_types	Dialog CONSUMED Data Types
:dialog_description_default       	Default Dialog Description
:dialog_designer			Dialog Designer [ #1 ]
:dialog_designer_help		... about Dialog Designer
:dialog_extra_slots		Extra slots
:dialog_extra_slots_tt		... add comma deliminated slot names (ie. extra_1,two,...)
:dialog_language			Language
:dialog_language_tt                 Choose the primary language for this dialog
:dialog_list			Dialog list
:dialog_method_list		Method list
:dialog_package			Package
:dialog_package_tt		Enter a package name (default = user)
:dialog_pragma			Pragma 
:dialog_produced_data_types	Dialog PRODUCED Data Types
:do_build_module			Generate Module
:dock_action			Action
:dock_bottom			Bottom
:dock_left			Left
:dock_pulldown			Pulldown
:dock_right			Right
:dock_section			Section
:dock_toolbar			Toolbar
:dock_top			Top
:docks				Docks
:drop_click_prompt		Click to insert gui element ...

:empty				Delete ALL sub-elements ...
:end_loading
####################################################################
## 
## Module Load Complete.
##
####################################################################
:explore_code		Explore generated code ...

:frame			Frame

:group_box		Group Box
:gui_action_definitions		
##
	## Work Area Actions ...
	##

:gui_con_database_code_1
#1.define_shared_constant(
	:databus_consumer_data_types,
	{#2},
	:private)
$
:gui_con_database_code_2
_method #1.sw_databus_data_available(type,data)
	write("'#1' data consumed : ",type,%tab,data)
_endmethod
$

:gui_layout		GUI Layout
:gui_pro_database_code_1
#1.define_shared_constant(
	:databus_producer_data_types,
	{#2},
	:private)
$
:gui_pro_database_code_2
_method #1.sw_databus_data_requested(type)
	write("'#1' data requested : ",type)
_endmethod
$
:gui_quit|()|
	.framework.close()

:hide			Don't use
:image_button_item	Image Button
:image_toggle_item	Image Toggle
:insert_prompt		#1 : Click inside a highlighted area to insert ...     <Space> to return to 'Select' mode
:invalid_module_name_and_version    Invalide Name/Version.

:label_item		Label
:load_dialog_xml		Load Dialog from XML
:load_from_file		Open
:loading_from_file      	Loading dialog XML description: '#1'
:menubar			Menubar
:menubar_action_definitions		
##
	## Menubar Actions ...
	##
:message_find_next   Next
:message_find_prev   Previous
:messages	Messages
:messages_for     Extra messages for '#1' class :
:missing_documentation_file
Documentation file not found.

#1

has been moved/renamed or deleted.
:missing_release_notes_file	
Release Notes file not found.

#1

has been moved/renamed or deleted.

:move_tab		Move current tab (#1/#2) to position ...
:new_dialog		New 
:new_dialog_class		dialog_class
:no_app_running		No active Applications
:no_base_path    	Please set the base 'Path' value in the 'Module' tab.
:no_dragging_into_self	Dragging an element into itself is not valid.
:no_title		No Title

:only_fixed_fonts_sizable	Use font_name='fixed' to allow font scaling.
:open_file_dir		File or Directory Selection
:outlook_bar_component	Outlook Bar
:overwrite_existing_class?	The selected import file uses the class '#1'.   

Do you want to overwrite the '#1'  dialog design you already have?

If not, press 'No' and use the 'Module Properties' tab to change the class
'#1'  to something else.
:overwrite_existing_file?	File already exists ... overwrite?

:paned_window		Paned Window
:panel_separator		Panel Separator
:parsing_progress    [#2] Loading the #1 ...
:paste_element		Paste
:paste_element_tt_0	Paste (Ctrl+V)  [ #1 ]
:paste_element_tt_n	Paste (Ctrl+V)  [ #1 + #2 sub-elements]
:plugin_con_database_code_1
#1_plugin.define_shared_constant(
	:databus_consumer_data_types,
	{#2},
	:private)
$

:plugin_con_database_code_2
_method #1_plugin.sw_databus_data_available(type,data)
	_if (f << _self.dialogs[:#1]) _isnt _unset
	_then 
		diag << f.component(:#1)
		diag.sw_databus_data_available(type,data)
	_endif 
_endmethod
$

:plugin_item		Plugin or Action
:plugin_pro_database_code_1
#1_plugin.define_shared_constant(
	:databus_producer_data_types,
	{#2},
	:private)
$
:plugin_pro_database_code_2
_method #1_plugin.sw_databus_data_requested(type)
	_if (f << _self.dialogs[:#1]) _isnt _unset
	_then 
		diag << f.component(:#1)
		_return diag.sw_databus_data_requested(type)
	_endif 
_endmethod
$
:pragma_classify_level_tt		Code Level classification
:pragma_package_tt		Code Package
:pragma_topic_tt			Code Topic(s): Enter comma separated values
:pragma_usage_tt			Code Usage(s): Select or enter comma separated values
:prompt_2	 	Add submenus/pullouts/separators and actionable buttons
:prompt_3		Add new panes, drag to re-order, click to select
:prompt_4		Add button actions to the left/right/top or bottom docks.
:prompt_5		Set Producer and Consumer data types.  Right-click to add/remove dataypes or edit the right panel directly.
:prompt_6		View the automatically generated XML and Magik code.
:prompt_7		Set the module parameters prior to generating the code.
:prompt_8		Select an Outlook Bar element to edit ...
:prompt_9		Some messages will be generated by the tool.  Add other messages to support your '#1' code.
:prompt_overwrite?	The '#1.magik' file in directory '#2' has been modified.  

Do you want to overwrite these modifications?
:public_comments_build_gui|()|
##
##  Define the GUI layout.
##
:public_comments_init_actions|()|
##
##  Initialize actions for SELF.
##
:public_comments_quit|()|
##
##  Close the dialog.
##

:radio_group		Radio Group
:radio_item		Radio Button
:reactivate_dialog	Re-Activate
:recordset		Recordset GUI Component
:refresh_a		F5
:refresh_app_list 	Refresh Application List
:refresh_view		Refresh
:reinit			Re-Initialise
:reinit_all		Clear ALL Docks
:reinit_dock		Clear this Dock
:remove_from_list	<-- Remove from list
:remove_from_requires	X-- Remove
:reset_rendering	Reset Rendering Position
:resizable_frame_prompt    The double chevron (>>) indicates that the dialog will be resizable once it is activated.
:rowcol			Row Column Grid
:rowcol_separator	Row Column Separator

:sample_canvas_agent_action_defs
##  Example canvas agent action definitions:
##       a.define_redraw( :|refresh_view()|,_self)
##       a.define_button_press( :|button_pressed()|,_self,:select)
##       a.define_button( :|button_released()|,_self,:select)
##       a.define_locator( :|changed_mouse_position()|,_self,:move)
##       a.define_locator( :|dragged_mouse_position()|,_self,:drag)
##       a.define_key({:|some_method()|,first_arg,second_arg},_self,%space)
##       a.define_hit({:|hit_method()|,first_arg,second_arg},_self)
:save_as			Save as ...
:save_dialog_xml		Save Dialog as XML
:save_to_file		Save
:select_mode		Select / Drag / Edit a GUI element ... 
:select_module_path	Select Module Path ...
:select_prompt		Click to select the '#1' id=#2
:set_module_path		Path
:show_rowcol_cells	Show Row Column Grid?
:simple_busy_progress_indicator
	_self.install_progress_indicator(
                  "progress", _self,
                  :indicator, #1,
                  :interrupt_message, :|interrupt_progressbar()|,
                  :progress_aspect, :progressbar_change,
                  :stop_aspect, :progressbar_end )

:simple_list_default_aspect_method
	#### 
	####  SAMPLE simple_list_item aspect code ...

	tab_list << rope.new()

	## Generate 10 rows of random data
	r26 << random.new(26)
	r4 << random.new(4)
	alpha << "abcdefghijklmnopqrstuvwxyz"

	_for i _over 1.upto(10)
	_loop
		str << ""
		_for j _over 1.upto(r4.get()+1)
		_loop
			str +<< alpha[r26.get()+1]
		_endloop

		## Add the row to the list
		tab_list.add_last(str)		
	_endloop

	>> tab_list
:simple_list_item		Simple List
:slider_item		Slider
:slider_rc
	slider_rc << rowcol.new(	
		#1,_unset,1,:pixel,	
		:style, 	:nested,	
		:default_col_alignment, 	:fill,
		:default_row_alignment, 	:fill,
		:resize?,	_true)
:snapshot	Snapshot
:snapshot_tt	Snapshot(s) to : #1\*.png
:sort_messages   Sort Messages
:statusbar		Statusbar
:style_choice_item	Style Choice
:supplimentary_gui_class_file_header
##% text_encoding = iso8859_1
#### 
####  Auto-generated by Dialog Designer v#4 : #1 
####
####  System.user_mame = #2
####
####  SUPPLIMENTARY code for gui class '#3'
####    - add/redefine code here, it will not be auto-modified.

:tab_box			Tab Box
:tabular_list		Tabular List
:test			Test
:text_choice_item	        	Text Choice
:text_item		Text Input
:text_window 		Text Window
:toggle_item		Check Box
:toolbar_action_definitions		
##
	## Toolbar Actions ...
	##
:tree_item		Tree List

:unit_text_item		Unit Text Input
:use_databus		Databus
:use_docks		Docks
:use_magik_xml		Magik / XML
:use_menubar		Menubar
:use_messages		Additional Messages
:use_module_properties	Module Properties
:use_statusbar		Statusbar
:user_messages_search_tt   Enter text to search for ...

:warning_used_dialog_class	The Dialog Class '#1' is not unique.
:window_stack		Window Stack

:xml			XML
:xml_creation_header 	<!-- Autogenerated by Dialog Designer for user #1 on #2 -->

:xml_version_header 	<?xml version="1.0" encoding="windows-1252" standalone="yes"?>
:yes_always		Yes, Always.
:|progress_indicator_change()|
	#### 
	####  Change the progressbar value.  Note that to 'reduce' the value 
	####  indicated the progress bar must be reset first.
	####

	v << args[1]

	_if v < .items[:progress_bar_value].default(bignum)
	_then
		.items[:progress_bar_value] << v

		_self.progress_indicator_init(_unset)
	_endif

	_self.changed( :progressbar_change, v )

:|progress_indicator_init()|
	#### 
	####  Reset the progress indicator.  This clears the pane,
	####  ready for the first :progressbar_change notification.
	####
#1

:|progress_indicator_stop()|
	#### 
	####  Stop the progressbar indicator.  Used when :indicator is 
	####  one of the indeterminate display types ...
	####	:busy_progress_indicator
	####	:simple_busy_progress_indicator
	####

	_self.changed( :progressbar_end )
