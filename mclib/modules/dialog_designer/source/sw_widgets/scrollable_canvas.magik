#% text_encoding = iso8859_1
#
# Copyright © 2007 iFactor Consulting, Inc. (http://www.ifactorconsulting.com)
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the Dialog Designer product
# directory, and is also available at http://www.fsf.org.
#
##########################################################################################
##
## @author Graham Garlick
##
## SCROLLABLE_CANVAS - added functionality specific to the dialog_designer.
##
##########################################################################################
_package user
$

_pragma(classify_level=restricted, topic={dialog_designer})
scrollable_canvas.define_shared_constant(:dd_properties,
				  property_list.new_with(
					  :width, :integer,
					  :height, :integer,
					  :row_alignment,  {:fill,:top,:centre,:bottom},
					  :col_alignment,  {:fill,:left,:centre,:right},
					  :has_vertical_scrollbar?, :boolean			  
						),
				  :public)
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method scrollable_canvas.dd_properties()
	## 
	## Return the editable properties for SELF.

	props << basic_wgt_geometry.dd_properties()

	_for k,e _over scrollable_canvas.dd_properties.fast_keys_and_elements()
	_loop
		props[k] << e
	_endloop

	props.remove_key(:balloon_tooltip)

	>> props
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method scrollable_canvas.canvas_width
	## 
	## Return the :release_nodifier property
	>> .properties[:canvas_width]
_endmethod
$

_method scrollable_canvas.default_min_width
	## 
	## Return the minimum default rendering width.
	
	>> _self.width.default("40").as_number().default(40)
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method scrollable_canvas.default_min_height
	## 
	## Return the minimum default rendering height.
	
	>> _self.height.default("40").as_number().default(40)
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method scrollable_canvas.new_with_xml_properties(parent,props)
	## 
	## Create a new instance of SELF with properties PROPS and
	## parent PARENT.

	>> _self.new(parent,props[:width],props[:height],canvas_agent.new( _unset ) ,_scatter props)
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method scrollable_canvas.new_dialog_default(rc,row,col)
	## 
	## Return the default instance for SELF.
	
	a << canvas_agent.new( _unset ) 
	>> _self.new(rc,40,40,a,
		      :has_vertical_scrollbar?, _false,
		      :row_alignment,:fill,
		      :col_alignment,:fill,
		      :row,row,:col,col)
_endmethod
$



_pragma(classify_level=restricted, topic={dialog_designer})
_method scrollable_canvas.render_on(canv,bb)
	## 
	## Render SELF on the canvas CANV.

	_dynamic !dialog_element_footprints!
	
	(r,c,h,w,pbb) << _self.dialog_footprint(bb)

	fs << fill_style.new_solid(colour.called(:white))
	fs.realise()
	pp << pseudo_polygon.new_with_sectors(pbb.boundary.sectors)
	pp.draw_filled_on(canv,fs)

	!dialog_element_footprints![pbb] << _self

	x0 << pbb.xmin
	y0 << pbb.ymin
	
	ls << line_style.new_with_properties(:foreground_colour,colour.called(:lightgrey),:width,1)
	canv.draw_segment(ls,x0,y0+h-1,x0+w,y0+h-1)
	canv.draw_segment(ls,x0+w-1,y0+h-1,x0+w-1,y0)

	ls << line_style.new_with_properties(:foreground_colour,colour.called(:black),:width,1)
	canv.draw_segment(ls,x0,y0,x0+w,y0)
	canv.draw_segment(ls,x0,y0+h,x0,y0)

	ls << line_style.new_with_properties(:foreground_colour,colour.called(:white),:width,1)
	canv.draw_segment(ls,x0,y0+h,x0+w,y0+h)
	canv.draw_segment(ls,x0+w,y0+h,x0+w,y0-1)

	ras << smallworld_product.get_raster_image(:canvas,:dialog_designer)
	canv.render_raster(ras,pbb.centre.x-8,pbb.centre.y-8,_false)
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method scrollable_canvas.gui_code(txt)
	## 
	## Generate gui_code for SELF.

	parent_id << _self.ensure_rc_parent(txt)

	txt.write(%tab,"a << canvas_agent.new(_unset)")

	txt.write(%newline,%tab,".items[:",_self.dialog_element_id, 
		  "] << scrollable_canvas.new(",parent_id,%,,_self.canvas_width,%,,_self.height,",a")

	_for n,v _over _self.valid_properties()
	_loop
		(n2,v2) << _self.gui_name_and_value(n,v)

		txt.write(%,,%newline,%tab*2,%:,n2,%,,%tab,v2)
	_endloop
	
	txt.write(" )",%newline)

	txt.write(%newline,dialog_designer.message(:sample_canvas_agent_action_defs),%newline)
_endmethod
$
