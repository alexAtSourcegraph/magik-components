#% text_encoding = iso8859_1
#
# Copyright © 2007 iFactor Consulting, Inc. (http://www.ifactorconsulting.com)
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the Dialog Designer product
# directory, and is also available at http://www.fsf.org.
#
##########################################################################################
##
## @author Graham Garlick
##
## TOGGLE_ITEM - added functionality specific to the dialog_designer.
##
##########################################################################################
_package user
$

_pragma(classify_level=restricted, topic={dialog_designer})
toggle_item.define_shared_constant(:dd_properties,
				  property_list.new_with(
					  :value,:boolean,
					  :change_selector,:string),
				  :public)
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method toggle_item.dd_properties()
	## 
	## Return the editable properties for SELF.

	props << _super.dd_properties()

	_for k,e _over toggle_item.dd_properties.fast_keys_and_elements()
	_loop
		props[k] << e
	_endloop

	>> props
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method toggle_item.default_min_width
	## 
	## Return the minimum default rendering width.
	
	>> 12 + _self.label_width
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method toggle_item.default_min_height
	## 
	## Return the minimum default rendering height.

	>> 12
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method toggle_item.id_changed()
	## 
	## Update the value when the ID changes.
	
	n << _self.get_property(:dialog_element_id).write_string.split_by(%_).last.as_number()
	.value << _true 
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method toggle_item.new_dialog_default(rc,row,col)
	## 
	## Return the default instance for SELF.
	
	rec << _self.new(rc,_unset,
			 :row,row,:col,col,
			 :col_alignment,:left,
			 :row_alignment,:top)
	rec.value << _true 
	>> rec
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method toggle_item.new_with_xml_properties(parent,props)
	## 
	## Create a new instance of SELF with properties PROPS and
	## parent PARENT.

	>> _self.new(parent,props[:label],_scatter props)
_endmethod
$


_pragma(classify_level=restricted, topic={dialog_designer})
_method toggle_item.render_on(canv,bb)
	## 
	## Render SELF on the canvas CANV.
	
	_dynamic !dialog_element_footprints!

	(r,c,h,w,pbb) << _self.dialog_footprint(bb)

	!dialog_element_footprints![pbb.deep_copy()] << _self
	
	lw << _self.label_width
	pbb.xmax -<< lw
	w -<< lw

	fs << fill_style.new_solid(colour.called(:white))
	fs.realise()
	pp << pseudo_polygon.new_with_sectors(pbb.boundary.sectors)
	pp.draw_filled_on(canv,fs)

	x0 << pbb.xmin
	y0 << pbb.ymin

	pbb << pixel_bounding_box.new(x0,y0,x0+w,y0+h)
	
	ls << line_style.new_with_properties(:foreground_colour,colour.called(:lightgrey),:width,1)
	canv.draw_segment(ls,x0,y0+h-1,x0+w,y0+h-1)
	canv.draw_segment(ls,x0+w-1,y0+h-1,x0+w-1,y0)

	ls << line_style.new_with_properties(:foreground_colour,colour.called(:black),:width,1)
	canv.draw_segment(ls,x0,y0,x0+w,y0)
	canv.draw_segment(ls,x0,y0+h,x0,y0)

	_if _self.value.default(_true)
	_then
		ls << line_style.new_with_properties(:foreground_colour,colour.called(:black),:width,2)
		canv.draw_segment(ls,x0+3,y0+5,x0+5,y0+8)
		canv.draw_segment(ls,x0+5,y0+8,x0+11,y0+2)
	_endif

	ls << line_style.new_with_properties(:foreground_colour,colour.called(:white),:width,1)
	canv.draw_segment(ls,x0,y0+h,x0+w,y0+h)
	canv.draw_segment(ls,x0+w,y0+h,x0+w,y0-1)

	ts << text_style.new_with_properties(:colour,colour.called(:black))
	lab << _self.message_from_keyed_message(_self.label)
	canv.draw_text(ts,pbb.xmin+18,pbb.ymax-2,lab)

_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method toggle_item.action_code(txt)
	## 
	## Write interpretable code for SELF on the stream TXT.

	_local name << _self.get_property(:dialog_element_id)

	txt.write(%newline,%tab,"_self.add_action( sw_action.new( :",name,%,,%newline)
	txt.write(%tab*2,":toolbar_control,        :toggle_item,")

	_if _self.balloon_tooltip.default("") <> ""
	_then
		km << _self.key_and_message(_self.balloon_tooltip)

		_if km[1] _isnt _unset 
		_then
			txt.write(%newline,%tab*2,":tooltip,                _self.message(",km[1],"),",%newline)
		_else
			txt.write(%newline,%tab*2,":tooltip,                ",%",km[2],%",%,)
		_endif
	_endif 
		
	_if _not _self.label.default("").empty?
	_then
		txt.write(%newline,%tab*2,":caption,                _self.message(:",name,"),",%newline)
	_else
		txt.write(%newline,%tab*2,":caption,                ",%",%",%,,%newline)		
	_endif

	_if _self.value.default(_false)
	_then
		txt.write(%newline,%tab*2,":value,                  _true,",%newline)
	_endif
	
	txt.write(%tab*2,":engine,                 _self")

	_if _self.change_selector.default("").empty?
	_then
		txt.write(" ) )",%newline)
	_else 
		txt.write(%,,%newline,%tab*2,":value_change_message,   :|",_self.change_selector,"| ) )",%newline)
	_endif
	
	>> name.as_symbol()
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
toggle_item.define_shared_constant(:has_logical_properties?,_true,:public)
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method toggle_item.set_logical_properties()
	## 
	## Set the common logical properties.
	
	_self.change_selector << _self.dialog_element_id + "_changed()"
_endmethod
$

