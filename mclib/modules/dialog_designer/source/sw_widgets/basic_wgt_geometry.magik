#% text_encoding = iso8859_1
#
# Copyright © 2007 iFactor Consulting, Inc. (http://www.ifactorconsulting.com)
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the Dialog Designer product
# directory, and is also available at http://www.fsf.org.
#
##########################################################################################
##
## @author Graham Garlick
##
## BASIC_WGT_GEOMETRY - added functionality specific to the dialog_designer.
##
##########################################################################################
_package user
$

_pragma(classify_level=restricted, topic={dialog_designer})
basic_wgt_geometry.define_shared_constant(:dd_properties,
					  property_list.new_with(
						  :dialog_element_id,:string,
						  :dialog_description,:string,
						  :balloon_tooltip,:string),
					  :public)
$

_pragma(classify_level=restricted, topic={dialog_designer})
basic_wgt_geometry.define_shared_constant(:hidden_properties,property_list.new(),:public)
$
_pragma(classify_level=restricted, topic={dialog_designer})
basic_wgt_geometry.define_shared_constant(:has_logical_properties?,_false,:public)
$
_pragma(classify_level=restricted, topic={dialog_designer})
basic_wgt_geometry.define_shared_constant(:panel_item?,_false,:public)
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method  basic_wgt_geometry.dialog_description()
	## 
	## Return the descriptive text for SELF, defaulting to the
	## value of SELF's slot :dialog_element_id.
	
	>> _if _self.dialog_description _is _unset 
	   _then
		   >> _self.dialog_element_id
	   _else
		   >> _self.dialog_description
	   _endif
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.id_changed()
	## 
	## Compatability method.
	
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.dd_properties()
	## 
	## Return a new copy of the basic properties shared by all widgets.
	
	ddp <<  basic_wgt_geometry.dd_properties.deep_copy()

	_if _self.panel_item?
	_then
		ddp[:enabled?] << :boolean
	_endif

	>> ddp
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.label_width
	## 
	## Return the width for SELF's label.
	
	vts << vtext_style.new(_self.font)
	lab << _self.message_from_keyed_message(_self.label)
	>> vts.box_coordinates(lab).bounds.width.rounded
_endmethod
$


						
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.dialog_min_width
	## 
	## Backstop. Return zero as minimum width.
	>> 0
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.dialog_min_height
	## 
	##  Backstop. Return zero as minimum height.
	>> 0
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.dd_font 
	## 
	## Return the default font used for text when rendering widgets.
	
	>> text_style.new_with_properties(:colour,colour.called(:black))
_endmethod
$


_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.dialog_footprint(_optional bb)
	## 
	## Return the row,col,row_height,col_height and rendering area
	## (a pixel_bounding_box) for SELF.

	x << 0
	y << 0
	w << _self.default_min_width
	h << _self.default_min_height

	_if bb _isnt _unset 
	_then
		x << bb.xmin
		y << bb.ymin
		
		_if _self.col_alignment _is :right
		_then
			x << bb.xmax - w
		_elif _self.col_alignment _is :centre
		_then
			x << bb.centre.x - w _div 2	
		_elif _self.col_alignment _is :fill
		_then
			w << bb.width
		_endif
		
		_if _self.row_alignment _is :bottom
		_then
			y << bb.ymax - h
		_elif _self.row_alignment _is :centre
		_then
			y << bb.centre.y - h _div 2	
		_elif _self.row_alignment _is :fill
		_then
			h << bb.height
		_endif
	_endif
	
	>> _self.row.default(1),_self.col.default(1),h,w,pixel_bounding_box.new(x,y,x+w,y+h)
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.xml_copy()
	## 
	## Backstop method, return basic description.
	>> _self.xml_description()
_endmethod
$



_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.xml_description(_optional n_tabs)
	## 
	## Generate an XML text string describing SELF.
	
	n_tabs << n_tabs.default(0)
	bb << %<
	es << %/
	eb << %>
	qq << %" #"
	eq << %=
	sp << " "
	nl << %newline
	tb << %tab

	txt << internal_text_output_stream.new()

	txt.write(n_tabs*tb,bb,"widget name=",qq,_self.dialog_element_id,qq,%>,nl)
	txt.write((n_tabs+1)*tb,bb,"property name=",qq,"dd_class",qq,
		  " value=",qq,_self.class_name,qq,es,eb,nl)

	_if _self.parent _isnt _unset 
	_then
		txt.write((n_tabs+1)*tb,bb,"property name=",qq,"dd_parent",qq,
			  " value=",qq,_self.parent.dialog_element_id,qq,es,eb,nl)
	_endif

	_if _self.dialog_description.default("") <> ""
	_then
		txt.write((n_tabs+1)*tb,bb,"property name=",qq,"dialog_description",qq,
			  " value=",qq,_self.dialog_description,qq,es,eb,nl)
	_endif
	
	_for n,v _over _self.valid_properties(_self.dd_show_xml_properties)
	_loop
		v2 << _self.replace_xml_tags(v)
		txt.write((n_tabs+1)*tb,bb,"property name=",qq,n,qq," value=",qq,v2,qq,es,eb,nl)		
	_endloop

	# Write out special properties that do not appear in the Dialog
	# Desiger element editor.  This method is subclassed by those
	# widget types that need to do this.  (eg. rowcol)
	_self.hidden_xml_properties(txt,n_tabs)

	txt.write(n_tabs*tb,"</widget>",nl)

	>> txt.string
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.replace_xml_tags(v)
	## 
	## Replace special characters (see dialog_desing.dd_symbols)
	## with a '_DD_xx' code where xx is the index of the symbol.
	
	_if v.class_name _is :char16_vector
	_then
		v2 << ""

		dd_symbols << dialog_design.dd_symbols

		_for i _over 1.upto(v.size)
		_loop
			_if (si << dd_symbols.index_of(v[i])) _isnt _unset 
			_then
				sp << _if si < 10
				      _then
					      >> "0"
				      _else
					      >> ""
				      _endif
				
				v2 +<< write_string("_DD_",sp,si)
			_else
				v2 +<< v[i]
			_endif
		_endloop

		_return v2
	_else 
		_return v
	_endif
_endmethod
$


_pragma(classify_level=restricted, topic={dialog_designer})
basic_wgt_geometry.define_shared_constant(
	:dd_show_xml_properties,
	{:balloon_tooltip,
	 :operation,
	 :filter,
	 :style_type,
	 :is_combo_box,
	 :action_name,
	 :value_default,
	 :value_dimension,
	 :value_display_unit,
	 :value_internal_unit,
	 :plugin_name},
	:public)
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.hidden_xml_properties(txt)
	## 
	## Backstop, do nothing.
	
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_iter _method basic_wgt_geometry.valid_properties(_optional no_skip_fields)
	## 
	## Iterator for properties set by the user, the optional
	## NO_SKIP_FIELDS is a simple vector of fields that will not be skipped.
	
	skipped_fields << equality_set.new_with(
				  "parent",
				  "dialog_element_id",
				  "dialog_description",
				  "balloon_tooltip",
				  "is_combo_box",
				  "font_size",
				  "font_name",
			#	  "key",   # Need this for radio items ... why was it
			#                   # 'skipped' before?
				  "filter",
				  "operation",
				  "style_type",
				  "value_default",
				  "value_dimension",
				  "value_display_unit",
				  "value_internal_unit")

	(sc,props) << _self.sorted_dd_properties()
	
	_for name _over sc.fast_elements()
	_loop
		value << props[name]

		_if value.class_name _is :colour
		_then
			value << write_string(value.red,%,,value.green,%,,value.blue)
		_endif 

		v << value.write_string
		n << name.write_string.split_by(%!).last

	#	show(name,value)
	#	show(skipped_fields.includes?(n),no_skip_fields.default({}).index_equal_of(n))

		_if skipped_fields.includes?(n) _andif no_skip_fields.default({}).index_equal_of(n) _is _unset 
		_then
			_continue 
		_endif

	#	show(name,value)
	#	write()

		_if n = "layout_info" _andif value _isnt _unset 
		_then
			pl << property_list.new_with(_scatter value)
			
			_for name2,value2 _over pl.fast_keys_and_elements()
			_loop
				_loopbody(name2,value2)
			_endloop
		_elif n.index_of_seq("_resize_values") _isnt _unset _andif
		    value.default({}).size > 1
		_then
			rv_txt << ""

			_for a_rv _over value.fast_elements()
			_loop
				rv_txt +<< write_string(a_rv,%,)
			_endloop

			rv_txt << rv_txt.slice(1,rv_txt.size-1)
			
			_loopbody(n,rv_txt)

		_elif  value.default("") <> ""
		_then
			_loopbody(n,v)
		_endif
	_endloop 
	      
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.sorted_dd_properties()
	## 
	## Return SELF's dd_properties as a sorted list.
	
	props << equality_hash_table.new()

	_for p _over _self.dd_properties().fast_keys()
	_loop
		props[p] << _self.perform(p)
	_endloop

	sc << sorted_collection.new()
	_for p _over props.fast_keys()
	_loop
		sc.add(p)
	_endloop

	_if _self.parent.class_name _is :rowcol _orif
	     _self.parent.class_name _is :dd_group_box _orif
	     _self.parent.class_name _is :dd_radio_group
	_then
		props[:row] << _self.row
		props[:col] << _self.col

		_if _not sc.includes?(:row)
		_then 
			sc.add(:row)
			sc.add(:col)
		_endif 
	_endif

	>> sc,props	
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.ensure_rc_parent(txt)
	## 
	## Check that SELF's parent is a kind of rowcol and if not then
	## write a rowcol to the text stream TXT.  The id for the
	## rc_parent is returned along with the row and column of SELF.

	row << _self.row
	col << _self.col

	>> _if _self.parent.is_kind_of?(rowcol) _andif _self.parent.class_name _isnt :dd_paned_window
	   _then
		   >> _self.parent.dialog_element_id,row,col
	   _else
		   tmp_id << _self.dialog_element_id + "_rc"
		   txt.write(%tab,
			     dialog_designer.message(:default_rc,
						     tmp_id,
						     _self.parent.dialog_element_id),
			     %newline*2)
		   >> tmp_id,1,1
	   _endif 
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.descriptive_text(txt_stream)
	## 
	## Insert SELF's dialog_description into the code as a private comment.
	
	_if (dd << _self.dialog_description.default("")) <> ""
	_then
		txt_stream.write(%newline,%tab,"# ",dd,%newline)
	_else
		txt_stream.write(%newline)
	_endif
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.gui_code(txt)
	## 
	## Generate gui_code for SELF, an action control placement.

	parent_id << _self.ensure_rc_parent(txt)

	txt.write(%tab,"_self.action(:",_self.dialog_element_id,
		  ").place_control_on(")
	
	txt.write(parent_id,",:dialog,")

	_if _self.responds_to?(:has_border?) _andif
	    _self.has_border? _is _false 
	_then
		txt.write(%newline,%tab*2,":has_border?, _false,")
	_endif

	txt.write(%newline,%tab*2,":control_type, { :",_self.class_name)

	_for n,v _over _self.valid_properties()
	_loop
		_if n = "has_border?" 
		_then
			_continue 
		_endif

		_if parent_id.index_of_seq("paned_window") _isnt _unset _andif
		    (n.index_of_seq("_alignment") _isnt _unset _orif n = "row" _orif n="col")
		_then
			_continue
		_endif
		
		( gui_name,gui_value)  << _self.gui_name_and_value(n,v)
		_if gui_name _is _unset 
		_then
			_continue 
		_endif

		txt.write(%,,%newline,%tab*3,%:,gui_name,%,,%tab,gui_value)
	_endloop

	txt.write(" } )")

	_if _self.panel_item? _andif _self.enabled? _is _false
	_then
		txt.write(%newline,%tab,"_self.action(:",_self.dialog_element_id,").enabled? << _false",%newline)
	_endif 

_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.gui_name_and_value(name,value)
	## 
	## Generate the appropriate text string for VALUE so that the
	## Magik interpreter will interpret it correctly.

	gui_name << name
	gui_value << value

	pv << _self.dd_properties()[name.as_symbol()]

	_if name.index_of_seq("resize_values") _isnt _unset 
	_then
		txt << ""
		_for val _over gui_value.elements()
		_loop
			txt +<< write_string(val,%,)
		_endloop
		
		_return gui_name,write_string(%{,txt.slice(1,txt.size-1),%})
		
	_elif value = "True"
	_then
		_return gui_name,"_true"
		
	_elif value = "False"
	_then 
		_return gui_name,"_false"
		
	_endif

	_if name = "image_file_name" _orif name = "image_module_name"
	_then
		_return
			
	_elif name = "strings" 
	_then
		_return
			
	_elif name = "values" _andif value.default("") <> ""
	_then
		_return :items,_self.dd_values_to_items(value)
		
	_elif pv.class_name _is :simple_vector
	_then
		_return gui_name,write_string(%:,value)
		
	_elif name = "representation_message" _andif
	      value.default("") <> ""
	_then
		_return name,write_string(%:,value)
		
	_elif pv _is :string _andif (name = "aspect" _orif
				     name.index_of_seq("selector") _isnt _unset _orif
				     name.index_of_seq("_notifier") _isnt _unset)
	_then
		_return gui_name,write_string(":|",value,%|)
		
	_elif pv _is :string _andif name = "window_name"
	_then
		_return "name",write_string(":|",value,%|)
		
	_elif pv _is :string _orif name.as_symbol() _is :label
	_then
		# Special parsing for column_headings
		_if gui_name = "column_headings"
		_then
			txt << ""
			_for str _over gui_value.split_by(%,).elements()
			_loop
				txt +<< write_string(%",str,%",%,)
			_endloop

			_return gui_name,write_string(%{,txt.slice(1,txt.size-1),%})
			
		_elif gui_name = "column_alignments"
		_then
			txt << ""
			_for str _over gui_value.split_by(%,).elements()
			_loop
				txt +<< write_string(%:,str.as_symbol(),%,)
			_endloop

			_return gui_name,write_string(%{,txt.slice(1,txt.size-1),%})
			
		_elif gui_name = "column_widths"
		_then
			_return gui_name,write_string(%{,value,%})
			
		_elif _not value.empty? _andif value[1] _is %:
		_then
			space_i << value.index_of(% )
			msg_key << value.slice(1,space_i-1)
			gui_value << "_self.message(" + msg_key + %)

			_return gui_name,gui_value
		_endif
	
		value << value.substitute_character(%",%') #"
		
		_return gui_name,write_string(%",value,%")
	_elif pv _is :integer _andif gui_name = "display_length" 
	_then
		_if (v <<  gui_value.as_number()) _isnt 0
		_then
			_return gui_name,v
		_else
			_return 			
		_endif
	_elif pv _is :vector
	_then
		_return gui_name,write_string(%{,value,%})
	_elif pv _is :colour
	_then
		_return gui_name,write_string("colour.new_rgb(",gui_value,%))
	_endif

	>> gui_name,gui_value 
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.action_code(txt)
	## 
	## Debug : write a warning that no action code is available,
	## which in many instances is completely fine.
	
	#debug write("debug ... NO 'action_code(txt)' method for object : ",_self)
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.gui_messages(txt)
	## 
	## Debug : write a warning that no gui messages are available,
	## which in many instances is completely fine.
	
	#debug write("debug ... NO 'gui_messages(txt)' method for object : ",_self)
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.embedded_messages(txt)
	## 
	## Insert messages for the situation where the user has
	## specified both the key and the message.
	
	_for k _over _self.dd_properties().fast_keys()
	_loop
		pv << _self.dd_properties()[k]
		v << _self.perform(k)

		_if pv _is :string
		_then
			_if _not v.default("").empty? _andif v[1] _is %:
			_then
				_if (si << v.index_of(% )) _isnt _unset _andif
				    si < v.size
				_then 
					msg_key << v.slice(1,si-1)
					txt.write(msg_key,%tab,v.slice_to_end(si+1),%newline)
				_endif 
			_endif
		_endif
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.key_and_message(txt)
	## 
	## If the user has specified the key and text then just return
	## the TXT portion.  This is used by the GUI Layout renderer.
	txt << txt.default("")

	_if _not txt.empty? _andif txt[1] _is %:
	_then
		_if (si << txt.index_of(% )) _isnt _unset _andif
		    si < txt.size
		_then 
			_return {txt.slice(1,si-1),txt.slice_to_end(si+1)}
		_endif 
	_endif

	_return {_unset,txt}
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.key_from_keyed_message(txt)
	## 
	## Return the key part of a keyed message TXT
	>> _self.key_and_message(txt)[1]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.message_from_keyed_message(txt)
	## 
	## Return the message portion of a keyed message TXT
	>> _self.key_and_message(txt)[2]
_endmethod
$


_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.gui_element_methods()
	## 
	## Return the methods that need to be defined for the
	## dialog_design to be compatable with SELF.

	rp << rope.new()
	
	_for p _over _self.dd_properties().fast_keys()
	_loop
		m << _self.perform(p).default("")
		
		_if (p.write_string.index_of_seq("selector") _isnt _unset _orif
		     (p.write_string.index_of_seq("_notifier") _isnt _unset _andif _self.class_name _isnt :dd_date_time_item)) _orif
		     (p.write_string.index_of_seq("aspect") _isnt _unset _andif _not m.empty?)
		_then
			_if p.write_string.index_of_seq("aspect") _is _unset _andif
			    m _isnt _unset _andif 
			    m.index_of_seq("()") _is _unset 
			_then
				m +<< "()"
			_endif

			_if m.default("()") <> "()" _then rp.add(m) _endif
		_endif
	_endloop

	>> rp
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.xml_properties(fr_w)
	## 
	## Return a property_list of SELF's properties.
	
	props << property_list.new()

	dd_props << _self.dd_properties()
	
	_for p _over fr_w.xml_elements()
	_loop
		name << p.attributes["name"].as_symbol()
		val << _self.decode_dd_symbols(p.attributes["value"])
		props[name] << val
	_endloop

	>> props
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.decode_dd_symbols(a_val)
	## 
	## Replace all the "_DD_xx" values with the correct symbol
	## indexed by 'xx'.

	_loop
		_if (i << a_val.default("").index_of_seq("_DD_")) _is _unset  
		_then
			_leave 
		_endif

		val << a_val.slice(1,i-1)
		si  << a_val.slice(i+4,i+5).as_number()
		val +<< dialog_design.dd_symbols[si]
		val +<< a_val.slice_to_end(i+6)

		a_val << val
	_endloop

	>> a_val
_endmethod
$


_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.parse_inner_structure(xml)
	## 
	## Backstop, do nothing.
_endmethod
$


_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.set_dd_properties(props)
	## 
	## Set the properties of SELF from the property list PROPS.

	dd_props << _self.dd_properties()

	_for dd_p,dd_type _over dd_props.fast_keys_and_elements()
	_loop
		_if (val << _self.dd_value(props[dd_p],dd_type)) _isnt _unset
		_then
			_self.perform(dd_p.with_chevron,val)
		_endif 
	_endloop

	_for p,t _over _self.hidden_properties.fast_keys_and_elements()
	_loop
		v << _self.dd_value(props[p],t)
		_self.perform(p.with_chevron,v)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.dd_value(prop_value_str,dd_type)
	## 
	## Return the PROP_VALUE_STR as an appropriate type based on DD_TYPE.

	_if prop_value_str _is _unset 
	_then
		_return _unset 
	_endif

	_if dd_type _is :boolean
	_then
		_return prop_value_str.lowercase = "true"
	_elif dd_type _is :string
	_then
		_return prop_value_str
	_elif dd_type _is :integer _orif dd_type _is :float
	_then
		_return prop_value_str.as_number()
	_elif dd_type _is :vector
	_then
		vals << prop_value_str.split_by(%,)

		_for i _over 1.upto(vals.size)
		_loop
			vals[i] << vals[i].as_number().default(0)
		_endloop
		_return vals
	_elif dd_type _is :colour
	_then
		c << prop_value_str.split_by(%,)
		_return colour.new_rgb(c[1].as_number(),c[2].as_number(),c[3].as_number())
				       
	_elif dd_type _is :symbol _orif
	      dd_type.class_name _is :simple_vector
	_then
		_return prop_value_str.as_symbol()
	_else
		# DEBUG statment.
		write("debug ... NO dd_value() for ",_self,%tab, prop_value_str,%tab,dd_type)
	_endif

_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.wgt_properties(props)
	## 
	## Return SELF's properties that are used to define a GUI element.

	props.remove_key(:dd_class)
	props.remove_key(:dd_parent)

	wgt_props << property_list.new()

	dd_props << _self.dd_properties()

	_for k,e _over dd_props.fast_keys_and_elements()
	_loop
		_if (v << _self.dd_value(props[k],e)) _isnt _unset 
		_then
			wgt_props[k] << v
		_endif
	_endloop

	wgt_props[:row] << props[:row].default(1).as_number()
	wgt_props[:col] << props[:col].default(1).as_number()
	
	_for k,e _over _self.hidden_properties.fast_keys_and_elements()
	_loop
		_if (v << _self.dd_value(props[k],e)) _isnt _unset 
		_then
			wgt_props[k] << v
		_endif
	_endloop

	>> wgt_props
_endmethod
$


####################################################################################
#
# Property Access and Setting for design_dialog purposes
#
####################################################################################

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.dialog_description
	## 
	## Return the :dialog_description property.
	>> _self.properties[:dialog_description]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.dialog_description << desc
	## 
	## Set the :dialog_description property.
	_self.properties[:dialog_description] << desc
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.dialog_element_id
	## 
	## Return the :dialog_element_id property.
	>> _self.properties[:dialog_element_id]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.dialog_element_id << id
	## 
	## Set the :dialog_element_id property.
	_self.properties[:dialog_element_id] << id
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.window_name
	## 
	## Return the :window_name property.
	
	>> .properties[:window_name]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.window_name << new_name
	## 
	## Set the :window_name property.
	
	.properties[:window_name] << new_name.write_string
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.aspect
	## 
	## Return the :aspect property
	
	>> .properties[:aspect]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.aspect << new_val
	## 
	## Set the :aspect property.
	
	>> .properties[:aspect] << new_val
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.values
	## 
	## Return the :values property.
	
	>> .properties[:values]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.values << new_vals
	## 
	## Set the :values property.
	
	.properties[:values] << new_vals
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.strings
	## 
	## Return the :strings property.
	
	>> .properties[:strings]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.strings << new_strings
	## 
	## Set the :strings property.

	.properties[:strings] << new_strings
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.balloon_help
	## 
	## Return the :balloon_help property.
	
	>> .properties[:balloon_help]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.balloon_help << new_help
	## 
	## Set the :balloon_help property.
	
	.properties[:balloon_help] << new_help
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.multiline?
	## 
	## Return the :multiline? property.
	
	>> _self.properties[:multiline?]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.multiline? << new_val
	## 
	## Set the :multiline? property.
	
	>> _self.properties[:multiline?] << new_val
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.label
	## 
	## Return the :label property.
	
	>> _self.properties[:label]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.label << new_val
	## 
	## Set the :label property.
	
	>> _self.properties[:label] << new_val
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.tab_location
	## 
	## Return the :tab_location property.
	
	>> _self.properties[:tab_location]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.tab_location << new_val
	## 
	## Set the :tab_location property.
	
	>> _self.properties[:tab_location] << new_val
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.aspect
	## 
	## Return the :aspect property.
	
	>> .properties[:aspect]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.aspect << new_val
	## 
	## Set the :aspect property.
	
	>> .properties[:aspect] << new_val
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.column_alignments
	## 
	## Return the :column_alignments property.
	>> .properties[:column_alignments]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.column_alignments << new_val
	## 
	##  Set the :column_alignments property.
	
	>> .properties[:column_alignments] << new_val
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.allow_dragging_notifier
	## 
	## Return the :allow_drag_nodifier property
	
	>> .properties[:allow_drag_nodifier]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.allow_dragging_notifier << new_val
	## 
	## Set the :allow_drag_nodifier property
	
	>> .properties[:allow_drag_nodifier] << new_val
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.release_dragging_notifier
	## 
	## Return the :release_nodifier property
	>> .properties[:release_drag_notifier]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.release_dragging_notifier << new_val
	## 
	## Set the :release_nodifier property
	>> .properties[:release_drag_notifier] << new_val
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.balloon_help_text
	## 
	## Return the :balloon_help_text property
	>> .properties[:balloon_help_text]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.balloon_tooltip
	## 
	## Return the :balloon_tooltip property
	>> .properties[:balloon_tooltip]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.balloon_tooltip << new_val
	## 
	## Set the :release_nodifier property
	>> .properties[:balloon_tooltip] << new_val
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.operation
	## 
	## Return the :type property
	>> .properties[:operation]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.operation << new_val
	## 
	## Set the :release_nodifier property
	>> .properties[:operation] << new_val
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.filter
	## 
	## Return the :type property
	>> .properties[:filter]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.filter << new_val
	## 
	## Set the :release_nodifier property
	>> .properties[:filter] << new_val
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.style_type
	## 
	## Return the :type property
	>> .properties[:style_type]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.style_type << new_val
	## 
	## Set the :release_nodifier property
	>> .properties[:style_type] << new_val
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.default_min_width
	## 
	## Return the minimum default rendering width.

	>> 40
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_iter _method basic_wgt_geometry.dd_child_elements()
	## 
	## Backstop iterator, returns nothing.
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.cascading_changes(what,new)
	## 
	## Backstop. Do nothing.
	
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.all_sub_elements()
	## 
	## Return an empty set, (no sub-elements)
	>>{}
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.set_logical_properties()
	## 
	## Backstop, does nothing.  Subclass as needed.
	
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.post_activation_code()
	## 
	## Backstop, returns empty string.
	>> ""
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method basic_wgt_geometry.dd_class_name
	## 
	## Backstop, returns SELF's class_name (as a string)
	>> _self.class_name.write_string
_endmethod
$
