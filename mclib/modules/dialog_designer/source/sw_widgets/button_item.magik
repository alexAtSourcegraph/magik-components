#% text_encoding = iso8859_1
#
# Copyright © 2007 iFactor Consulting, Inc. (http://www.ifactorconsulting.com)
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the Dialog Designer product
# directory, and is also available at http://www.fsf.org.
#
##########################################################################################
##
## @author Graham Garlick
##
## BUTTON_ITEM - added functionality specific to the dialog_designer.
##
##########################################################################################
_package user
$

_pragma(classify_level=restricted, topic={dialog_designer})
button_item.define_shared_constant(:dd_properties,
					  property_list.new_with(
						  :min_width,:integer,
						  :min_height,:integer,
						  :balloon_help_text,:string,
						  :selector,:string),
					  :public)
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method button_item.dd_properties()
	## 
	## Return the editable properties for SELF.

	props << _super.dd_properties()

	_for k,e _over button_item.dd_properties.fast_keys_and_elements()
	_loop
		props[k] << e
	_endloop

	props.remove_key(:balloon_tooltip)

	>> props
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method button_item.id_changed()
	## 
	## Update label when the id changes	
	key << _self.get_property(:dialog_element_id)
	n << key.write_string.split_by(%_).last.as_number()
	.label    << write_string("Button ",n)
	.selector << key + :|()|
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method button_item.default_min_width
	## 
	## Return the minimum default rendering width.

	ts  << text_style.new_with_properties(:colour,colour.called(:black))
	vts << vtext_style.new(ts.font)
	lab << _self.message_from_keyed_message(_self.label)
	text_w <<  12 + vts.box_coordinates(lab).bounds.width.rounded
	>> max(text_w,_self.min_width.default(text_w))
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method button_item.default_min_height
	## 
	## Return the minimum default rendering height.

	h << _self.min_height.default(20).abs
	>> max(h,15)
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method button_item.new_dialog_default(rc,row,col)
	## 
	## Return the default instance for SELF.
	
	>> _self.new(rc,"button",_unset,:|button_pressed()|,
		     :row,row,:col,col,
		     :col_alignment,:left,
		     :row_alignment,:top,
		     :min_width,60)
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method button_item.render_on(canv,bb)
	## 
	## Render SELF on the canvas CANV.
	
	_dynamic !dialog_element_footprints!

	(r,c,h,w,pbb) << _self.dialog_footprint(bb)

	fs << fill_style.new_solid(colour.called(:lightgrey))
	fs.realise()
	pp << pseudo_polygon.new_with_sectors(pbb.boundary.sectors)
	pp.draw_filled_on(canv,fs)

	!dialog_element_footprints![pbb] << _self

	x0 << pbb.xmin
	y0 << pbb.ymin

	ls << line_style.new_with_properties(:foreground_colour,colour.called(:lightslategray),:width,1)
	canv.draw_segment(ls,x0,y0+h-1,x0+w,y0+h-1)
	canv.draw_segment(ls,x0+w-1,y0+h-1,x0+w-1,y0)

	ls << line_style.new_with_properties(:foreground_colour,colour.called(:white),:width,1)
	canv.draw_segment(ls,x0,y0,x0+w,y0)
	canv.draw_segment(ls,x0,y0+h,x0,y0)

	ls << line_style.new_with_properties(:foreground_colour,colour.called(:black),:width,1)
	canv.draw_segment(ls,x0,y0+h,x0+w,y0+h)
	canv.draw_segment(ls,x0+w,y0+h,x0+w,y0-1)

	ts << text_style.new_with_properties(:colour,colour.called(:black))
	vts << vtext_style.new(ts.font)

	lab << _self.message_from_keyed_message(_self.label)
	text_bb <<  vts.box_coordinates(lab).bounds
	x << pbb.centre.x - text_bb.width.floor _div 2
	y << pbb.centre.y + text_bb.height.floor _div 2 - 1

	canv.draw_text(ts,x,y,lab)

	fs.destroy()
	ls.destroy()
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method button_item.action_code(txt)
	## 
	## Write interpretable code for SELF on the stream TXT.

	_local name << _self.get_property(:dialog_element_id)

	txt.write(%newline,%tab,"_self.add_action( sw_action.new( :",name,%,,%newline)
	txt.write(%tab*2,":toolbar_control,        :button_item,",%newline)
	txt.write(%tab*2,":caption,                _self.message(:",name,"),",%newline)
	txt.write(%tab*2,":engine,                 _self")

	_if _self.balloon_tooltip.default("") <> ""
	_then
		txt.write(%,,%newline,%tab*2,":tooltip,                ",%",_self.balloon_tooltip,%")
	_endif 
		
	_if _self.selector.default("").empty?
	_then
		txt.write(" ) )",%newline)
	_else 
		txt.write(%,,%newline,%tab*2,":action_message,         :|",_self.selector,"| ) )",%newline)
	_endif
	
	>> name.as_symbol()
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method button_item.new_with_xml_properties(parent,props)
	## 
	## Create a new instance of SELF with properties PROPS and
	## parent PARENT.

	sel << props[:selector].write_string
	props.remove_key(:selector)

	>> _self.new(parent,props[:label],_unset,sel,_scatter props)
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
button_item.define_shared_constant(:has_logical_properties?,_true,:public)
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method button_item.set_logical_properties()
	## 
	## Set the common logical properties.
	
	_self.selector << _self.dialog_element_id + "()"
_endmethod
$
