#% text_encoding = iso8859_1
#
# Copyright © 2007 iFactor Consulting, Inc. (http://www.ifactorconsulting.com)
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the Dialog Designer product
# directory, and is also available at http://www.fsf.org.
#
##########################################################################################
##
## @author Graham Garlick
##
## IMAGE_ITEM - added functionality specific to the dialog_designer.
##
##########################################################################################
_package user
$
_pragma(classify_level=restricted, topic={dialog_designer})
image_item.define_shared_constant(:dd_properties,
					  property_list.new_with(
							:image_file_name,:string,
							:image_module_name,:string,
							:has_border?,:boolean),
					  :public)
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method image_item.dd_properties()
	## 
	##  Return the editable properties for SELF.

	props << _super.dd_properties()

	_for k,e _over image_item.dd_properties.fast_keys_and_elements()
	_loop
		props[k] << e
	_endloop

	props.remove_key(:label)

	>> props
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method image_item.image_file_name
	## 
	## Return the :image_file_name property
	>> _self.get_property(:image_file_name)
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method image_item.image_file_name << newname
	## 
	## Set the :image_file_name property
	>> _self.set_property(:image_file_name,newname)
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method image_item.image_module_name
	## 
	## Return the :image_module_name property
	>> _self.get_property(:image_module_name)
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method image_item.image_module_name << newname
	## 
	## Set the :image_module_name property
	>> _self.set_property(:image_module_name,newname)
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method image_item.has_border?
	## 
	## Return the :has_border? property
	>> _self.properties[:has_border]
_endmethod
$
_pragma(classify_level=restricted, topic={dialog_designer})
_method image_item.has_border? << new_val
	## 
	## Set the :has_border? property
	>> _self.properties[:has_border] << new_val
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method image_item.default_min_width
	## 
	## Return the minimum default rendering width.

	(w,h) << _self.raster_image.size()
	>> max(w,19)
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method image_item.default_min_height
	## 
	## Return the minimum default rendering height.

	(w,h) << _self.raster_image.size()
	>> max(h,19)
_endmethod
$

#_pragma(classify_level=restricted, topic={dialog_designer})
#_method image_item.new_dialog_default(rc,row,col)
#	## 
#	## Return the default instance for SELF.
#	
#	img << smallworld_product.get_raster_image(:image_item,:dialog_designer)
#	new_rec << _self.new(rc,"image",_unset,:|image_pressed()|,
#			     :row,row,:col,col,
#			     :image,img)
#	new_rec.set_property(:image_file_name,:image_item)
#	>> new_rec
#_endmethod
#$

_pragma(classify_level=restricted, topic={dialog_designer})
_method image_item.new_with_xml_properties(parent,props)
	## 
	## Create a new instance of SELF with properties PROPS and
	## parent PARENT.

	ifn << props[:image_file_name]
	imn << props[:image_module_name]
	
	img << smallworld_product.get_raster_image(ifn,imn.default(:dialog_designer))
	selector << props[:selector]
	
	props.remove_key(:image_file_name)
	props.remove_key(:image_module_name)
	props.remove_key(:selector)
	
	new_rec << _self.new(parent,"image",_unset,props[:selector],_scatter props)
	new_rec.set_property(:image_file_name,ifn)
	new_rec.set_property(:image_module_name,imn)
	
	>> new_rec
_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method image_item.raster_image
	## 
	## Return the raster image for SELF.

	_dynamic !current_dialog!
	
	ifn << _self.image_file_name.default(:image_item)
	imn << _self.image_module_name.default(!current_dialog!.dialog_class)

	_if (img << smallworld_product.get_raster_image(ifn,imn)) _is _unset 
	_then
		
		img << smallworld_product.get_raster_image(ifn,:dialog_designer)
	_endif
	
	>> img
_endmethod
$


_pragma(classify_level=restricted, topic={dialog_designer})
_method image_item.render_on(canv,bb)
	## 
	## Render SELF on the canvas CANV.
	_dynamic !dialog_element_footprints!

	(r,c,h,w,pbb) << _self.dialog_footprint(bb)

	canv.render_raster(_self.raster_image,pbb.xmin,pbb.ymin,_false )
	
	x0 << pbb.xmin
	y0 << pbb.ymin

	(w,h) << _self.raster_image.size()

	pbb << pixel_bounding_box.new(x0,y0,x0+w,y0+h)

	!dialog_element_footprints![pbb] << _self

	ls << line_style.new_with_properties(:foreground_colour,colour.called(:lightslategray),:width,1)
	canv.draw_segment(ls,x0,y0+h-1,x0+w,y0+h-1)
	canv.draw_segment(ls,x0+w-1,y0+h-1,x0+w-1,y0)

	ls << line_style.new_with_properties(:foreground_colour,colour.called(:white),:width,1)
	canv.draw_segment(ls,x0,y0,x0+w,y0)
	canv.draw_segment(ls,x0,y0+h,x0,y0)

	ls << line_style.new_with_properties(:foreground_colour,colour.called(:black),:width,1)
	canv.draw_segment(ls,x0,y0+h,x0+w,y0+h)
	canv.draw_segment(ls,x0+w,y0+h,x0+w,y0-1)

	ls.destroy()

_endmethod
$

_pragma(classify_level=restricted, topic={dialog_designer})
_method image_item.action_code(txt)
	## 
	## Write interpretable code for SELF on the stream TXT.

	_local name << _self.get_property(:dialog_element_id)

	txt.write(%newline,%tab,"_self.add_action( sw_action.new( :",name,%,,%newline)
	txt.write(%tab*2,":toolbar_control,        :image_item,",%newline)
	txt.write(%tab*2,":menubar_control,        :button_item,",%newline)
	txt.write(%tab*2,":caption,                _self.message(:",name,"),",%newline)
	txt.write(%tab*2,":engine,                 _self,",%newline)
	txt.write(%tab*2,":action_message,         :|",name,"()|,",%newline)

	_if _self.balloon_tooltip.default("") <> ""
	_then
		txt.write(%tab*2,":tooltip,                ",%",_self.balloon_tooltip,%",%,,%newline)
	_endif 
			
	f_name << _self.image_file_name
	_if (m_name << _self.get_property(:image_module_name)) _is _unset
	_then
		m_name << "_self.module_name"
	_else
		m_name << ":"+m_name
	_endif 

	txt.write(%tab*2,":image,                 {:",f_name,",",m_name,"} ) )",%newline)

	>> name.as_symbol()

_endmethod
$
