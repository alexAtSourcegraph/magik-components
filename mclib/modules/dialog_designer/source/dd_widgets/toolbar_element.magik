#% text_encoding = iso8859_1
#
# Copyright © 2007 iFactor Consulting, Inc. (http://www.ifactorconsulting.com)
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the Dialog Designer product
# directory, and is also available at http://www.fsf.org.
#
##########################################################################################
##
## @author Graham Garlick
## @version 1.2 (June 2007)
##
## TOOLBAR_ELEMENT - object to hold toolbar element data.
##
##########################################################################################
_package user

_pragma(classify_level=restricted, usage={redefinable})
def_slotted_exemplar(:toolbar_element,
		     {
			     {:name,_unset,:writable},
			     {:type,_unset,:writable},
			     {:image_file_name,_unset,:writable},
			     {:image_module_name,_unset,:writable},
			     {:control_type,_unset,:writable},
			     {:action_message,_unset,:writable}
			     
		     },:dd_element) 
$


_pragma(classify_level=restricted, usage={redefinable})
toolbar_element.define_shared_constant(
	:control_types,
	{:image_button_item, 
	 :button_item, 
	 :image_item, 
	 :toggle_item, 
	 :text_toggle_item, 
	 :image_toggle_item, 
	 :combo_box_item, 
	 :choice_item, 
	 :text_item, 
	 :text_display},
	:public)
$

_pragma(classify_level=restricted, usage={redefinable})
toolbar_element.define_shared_constant(:dd_properties,
					  property_list.new_with(
						  :name,:string,
						  :action_message,:string,
						  :image_file_name,:string,
						  :image_module_name,:string,
						  :control_type,toolbar_element.control_types,
						  :type,:string),
					  :public)
$

_pragma(classify_level=restricted, usage={redefinable})
_method toolbar_element.init(vals)
	## 
	## Initialise SELF from the property list VALS.

	.name << vals[:name]
	.type << vals[:type]
	.action_message << vals[:action_message]
	.image_file_name << vals[:image_file_name]
	.image_module_name << vals[:image_module_name]
	.control_type << vals[:control_type]
	
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, usage={redefinable})
_method toolbar_element.dd_properties()
	## 
	## Return the editable properties for SELF.

	props << _super.dd_properties()

	_for k,e _over toolbar_element.dd_properties.fast_keys_and_elements()
	_loop
		props[k] << e
	_endloop

	_if _self.type _isnt :button
	_then
		props.remove_key(:image_file_name)
		props.remove_key(:image_module_name)
	_endif

	>> props
_endmethod
$

_pragma(classify_level=restricted, usage={redefinable})
_method toolbar_element.dialog_description()
	## 
	## Return descriptive text for SELF.

	>> .name
_endmethod
$

_pragma(classify_level=restricted, usage={redefinable})
_method toolbar_element.dialog_element_id
	## 
	## Return the :name slot value.
	>> .name
_endmethod
$




