#% text_encoding = iso8859_1
##
##  Auto-generated by Dialog Designer ( 07/06/2007 )
##
##  System.user_mame = ggarlick
##
## Simple Dialog to choose a system path.
##
## usage : select_path.open_dialog(parent_model,:|ok_message()|,"Title TEXT")
##
##   ok_message will be sent to the parent_model if "Select" is
##   pressed.  The currently selected path is passed to this method.
##   

_package user

_pragma(classify_level=restricted, usage={redefinable})
def_slotted_exemplar(:select_path,
	{
		{:items, _unset, :writable},
		{:path, _unset, :writable},
		{:ok_msg, _unset,:writable}	
	},
	:model)
$

_pragma(classify_level=restricted, usage={redefinable})
_method select_path.init(ok_msg)
	## 
	## Initialise SELF.
	
	_super.init()
	
	.ok_msg << ok_msg

	>> _self 
_endmethod
$

_pragma(classify_level=restricted, usage={redefinable})
_method select_path.new(ok_msg)
	## 
	## New instance.
	>> _clone.init(ok_msg)
_endmethod
$


_pragma(classify_level=restricted, usage={redefinable})
_method select_path.new_dialog(parent_model,msg,_optional title)
	## 
	## Subclass to set the title.

	nd << _super.new_dialog(parent_model,msg).activate()
	nd.top_frame.title << title.default(_self.class_name)

	>> nd
_endmethod
$



_pragma(classify_level=restricted, usage={redefinable})
_method select_path.activate_in(a_frame)
	##
	##  Auto-generated by Dialog Designer : 07/06/2007
	##
	##  Define the GUI layout.
	##

	.items << property_list.new()

	rowcol_01 << rowcol.new(a_frame,2,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Select Path",
		:bottom_spacing,	6,
		:col_spacing,	7,
		:default_col_alignment,	:fill,
		:default_row_alignment,	:fill,
		:left_spacing,	6,
		:right_spacing,	6,
		:row_resize_values,	{100,0},
		:row_spacing,	6,
		:top_spacing,	6)

	_local l_style_holder << string_styles_holder.new_with()
	l_style_holder.add_image_scheme(:selected_scheme, :default, :closed_folder,
					:selected, :open_folder)

	.items[:path_tree] << tree_item.new(rowcol_01,
		:model,	_self,
		:col,	1,
		:col_alignment,	:fill,
		:mode,	:one,
		:row,	1,
		:aspect, :path_tree,
		:select_notifier, :path_selected|()|,
		:style_holder,  l_style_holder,
		:row_alignment,	:fill )

	rowcol_02 << rowcol.new(rowcol_01,1,2,:pixel,
		:resize?,	_true,
		:tab_label,	"Select Path",
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	2,
		:row_spacing,	6,
		:top_spacing,	0)

	button_item.new_safe(rowcol_02,"Cancel",
			     _self,:cancel|()|,
			     :col,	1,
			     :col_alignment,	:left,
			     :min_width,	60,
			     :row,	1,
			     :row_alignment,	:top )

	button_item.new_safe(rowcol_02,"Select",
			     _self,       :select|()|,
			     :col,	2,
			     :col_alignment,	:right,
			     :min_width,	60,
			     :row,	1,
			     :row_alignment,	:top )

	>> rowcol_01
_endmethod
$

_pragma(classify_level=restricted, usage={redefinable})
_method select_path.path_selected(sel)
	## 
	## Expand the directory tree as needed.

	_if (dt << sel.an_element()) _is _unset _then _return _endif

	.path << dt.key
						      
	_if dt.children?
	_then
		_return 
	_endif

	dc << directory_channel.new(sel.an_element().key)

	_loop
		_if (ds << dc.get_status()) _is _unset 
		_then
			_leave 
		_endif

		_if ds.type _is :directory
		_then
			sdt << display_tree.new(ds.name,_unset,dt)
			i << ds.name.rindex_of(%\)
			d_name << ds.name.slice_to_end(i+1)
			sdt.styled_string <<  {:image, :selected_scheme, d_name}
		_endif
	_endloop
	
	_if dt.children?
	_then
		.items[:path_tree].agent.damaged(.items[:path_tree].bounds.expand(10))
		dt.expanded? << _true 
	_endif
_endmethod
$


_pragma(classify_level=restricted, usage={redefinable})
_method select_path.path_tree
	## 
	## Return the initial directory tree.

	p_list << rope.new()

	_for p _over "ABCDEFGHIJKLMNOPQRSTUVWXYZ".fast_elements()
	_loop
		pth << write_string(p,":\")

		_if system.file_exists?(pth)
		_then
			dt << display_tree.new(pth,_unset,_unset)
			dt.styled_string <<  {:image, :selected_scheme, pth.slice(1,pth.size-1)}
			p_list.add(dt)

			# Backup .path in case the user presses 'Select' immediately.
			.path << pth.slice(1,pth.size-1)
		_endif
	_endloop
	
	>> p_list
_endmethod
$

_pragma(classify_level=restricted, usage={redefinable})
_method select_path.cancel()
	##
	##  Auto-generated by Dialog Designer : 07/06/2007
	##
	##  Close the dialog.
	##
	_self.close()
_endmethod
$

_pragma(classify_level=restricted, usage={redefinable})
_method select_path.select()
	##
	##  Return the current path to the parent_model.

	.parent_model.perform(.ok_msg,.path)
	_self.close()
_endmethod
$
