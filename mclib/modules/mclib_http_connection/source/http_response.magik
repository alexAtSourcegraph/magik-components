#% text_encoding = cp1252
########################################################################
##
## Last Saved Time-stamp: <2007-08-29 15:17:00 brad.sileo>
##
## Created By: Brad Sileo
## Date: 06-30-2005
##
##
## Description: 
##
## ---------- Revision History -----------
##
## (04-03-2014 Reinhard Hahn):
## - enabled for decoding
## - deprecated former slot access method http_response.data        
##
## -------- end revision history ---------
########################################################################
_package mclib
_pragma(classify_level=basic)
##  Holds the results of sending an http_request. This is
## whatever data was returned from the server.
## You can get several things form this:
##
##  resp.smart_result() - returns an object best tailored to
##                  represent the result, such as a raster_image,
##                  a string, or a simple_xml_document.
##
##  resp.response_status_code  - The HTTP code fo rthe result,
##                               such as 200, 401, 404, etc..
##  resp.response_status_phrase- A string for the result, like
##                               "OK", "Not Found"
##
## for text type result types the text is converted according
## to the charset parameter of the content_type field of the
## header. But this object also holds onto the raw_data which
## can be used to process binary results.
##
## for backward compatilibity there is also a slot like method
## 'data' which gives the result as a vector of single lines
##
def_slotted_exemplar(:http_response,
                      {
			      {:header,_unset},
			      {:text,_unset},
			      {:raw_data,_unset}
		      },
		      {:sw_component})
$

_pragma(classify_level=deprecated)
_method http_response.data
	## -------Deprecated------
	## Reason     : data is no longer a slot and so access may be slow
	## Use instead: _self.text or _self.result_string
	## Action     : <action to be taken - use / for options>
	## Deprecated : 03 April 2014
	## -----------------------
	## Holds the data received from the server, converted to
	## characters and broken at each line break

	# (06-30-2005 Brad Sileo): created as slot access method
	#
	# (04-03-2014 Reinhard Hahn): changed to a method, but
	# set deprecated
	#
	# for backwards compatibility, only

	_if .text _isnt _unset
	_then
		_return .text.split_by(%newline)
	_else
		_return _self.int!data(_true)
	_endif 
_endmethod
$



_pragma(classify_level=basic)
## Holds the data received from the server if it's in text
## format, or endcoded, _unset otherwise
# (04-03-2014 Reinhard Hahn): created
http_response.define_slot_externally_readable(:text, _false )
$
_pragma(classify_level=basic)
## Holds the data received from the server in the HTTP header,
## broken for each header line. See header_value().
http_response.define_slot_externally_readable(:header, _false )
$
_pragma(classify_level=basic)
## Holds the raw bytes received from the server
http_response.define_slot_externally_readable(:raw_data, _false )
$


http_response.define_property(:data_file_path,:string,
			      "The path where files are placed",
			      _true,_true,_unset)
$
http_response.define_property(:data_file_name,:string,
			      "The name of my result file",
			      _true,_true,_unset)
$

_pragma(classify_level=basic, usage={redefinable})
_method http_response.new_for(name,framework, a_stream)
	## returns a new response created from the data in
	## A_STREAM a text input stream with the response data in it
	## 
	##

	# (06-30-2005 Brad Sileo): created.
	new << _self.new(name,framework)
	new.init_for(a_stream)
	>> new
_endmethod
$

_pragma(classify_level=basic, usage={redefinable})
_method http_response.init(_gather args)
	## 
	## 
	##

	# (06-30-2005 Brad Sileo): created.
	.header << rope.new()
	# Uli Naedelin
	# As slot data is not used and does not exist in SW 4.3
	# (causing loading error) below line is removed
	# .data << rope.new()
	>> _super.init(_scatter args)
_endmethod
$

_pragma(classify_level=basic, usage={redefinable})
_method http_response.init_for(a_stream)
	## 
	## 
	##

	# (06-30-2005 Brad Sileo): created.

	# (04-03-2014 Reinhard Hahn): enabled for decoding
	# charsets. non-text input is no longer stored within the
	# former slot data. text input is now converted usint the given 
	# charset and written to .text
	
	res << rope.new()
	first? << _true 
	.header << a_header << rope.new()
	line_chars << rope.new()
	# first read the header, only
	_loop
		c << _unset 
		l << a_stream.get()
		_if l _isnt _unset _then
			c << l.as_character()
		_endif 
		_if c _is %newline _orif
		    c _is _unset 
		_then
			cur_line << "".new_from(line_chars)
			_if first? _is _true 
			_then
				first? << _false
				head << cur_line.split_by(%space)
				ver << head[1]
				code << head[2].as_number()
				_if head.size = 3
				_then
					phrase << head[3]
				_endif 
			_endif
			_if cur_line.empty? 
			_then
				# Check the whole header here
				_leave 
			_endif
			a_header.add_last(cur_line)
			line_chars.empty()
		_elif c _is %return
		_then
			
		_else
			line_chars.add_last(c)
		_endif
		_if l _is _unset _then _leave _endif 
	_endloop
	# now the data
	# if we have no charset parameter for text date we use
	# :strip_cr for decoding
	format << _self.decoding_format.
		  default(_if _self.main_content_type.canonical _is "text"
			  _then
				  >> :strip_cr
			  _endif)
	tc << _if format _isnt _unset _then >> text_converter.new(format,_false) _endif
	out << _if tc    _isnt _unset _then >> internal_text_output_stream.new() _endif 
	.raw_data << rope.new()
	_loop
		some_data << a_stream.get()
		_if some_data _isnt _unset
		_then
			.raw_data.add_all_last(some_data)
			_if tc _is _unset
			_then
				_continue
			_endif 

			tc.set_input(some_data)
		_endif
		_loop
			_if tc.run() _isnt :writing
			_then
				_leave
			_endif 
			out.write(tc.copy_output())
		_endloop
		_if some_data _is _unset _orif
		    some_data.empty?
		_then
			out.write(tc.copy_output())
			_leave
		_endif
	_endloop
	.text << _if out _isnt _unset _then >> out.string _endif 
_endmethod 
$

_pragma(classify_level=restricted, usage={redefinable})
_private _method http_response.int!content_type
	##  The type of data shown in my header
	# (04-03-2014 Reinhard Hahn): created
	>> _self.header_value("Content-Type")
_endmethod
$


_pragma(classify_level=basic, usage={redefinable})
_method http_response.content_type
	## The type of data shown in my header
	# (06-29-2005 Brad Sileo): created.
	>> _self.int!content_type.default("N/A")
_endmethod
$

_pragma(classify_level=basic, usage={redefinable})
_method http_response.content_type_without_params
	## The type of data shown in my header, but parameters stripped
	## (everything after an ';')

	# (04-03-2014 Reinhard Hahn): created
	ct << _self.content_type
	>> ct.slice(1,ct.index_of(%;).default(ct.size+1)-1)
_endmethod
$

_pragma(classify_level=basic, usage={redefinable})
_method http_response.main_content_type
	## the left half of the content type, before the slash, if possible
	ct << _self.int!content_type
	_if ct _is _unset _then _return "N/A" _endif 
	_if (idx << ct.index_of_any_of("/;")) _isnt _unset
	_then
		_return ct.slice(1,idx-1)
	_else
		_return ct
	_endif 
_endmethod
$


_pragma(classify_level=basic, usage={redefinable})
_method http_response.sub_content_type
	## returns the right half of the content type, after the slash,
	## if possible.
	##
	## Parameters (after ';' are omitted

	# (06-30-2005 Brad Sileo): created.
	# (04-03-2014 Reinhard Hahn): don't use parts after ';' 

	>> _if (ct << _self.int!content_type) _isnt _unset _andif
	       (idx << ct.index_of(%/)) _isnt _unset
	   _then
		   idx2 << ct.index_of(%;,idx).default(ct.size+1)
		   >> ct.slice(idx+1,idx2-1)
	   _else
		   >> "N/A"
	   _endif
_endmethod
$

_pragma(classify_level=basic, usage={redefinable})
_method http_response.content_type_charset
	## yields the value of the charset parameter of the field
	## Content-Type, if available

	# (04-03-2014 Reinhard Hahn): created

	>> _self.header_parameter("Content-Type","charset")
_endmethod
$

_pragma(classify_level=advanced, usage={redefinable})
_method http_response.decoding_format
	## the magik version of _self.content_type_charset 

	# (04-03-2014 Reinhard Hahn): created
	>> _self.text_charset_map[_self.content_type_charset]
_endmethod
$

_pragma(classify_level=advanced, usage={redefinable})
## translation of possible values of _self.content_type_charset
## to text_converter formats
##
## More formats see
## text_converter.describe_formats() in connection with the
## possible charset values as given by iana
## http://www.iana.org/assignments/character-sets/character-sets.xhtml

# (04-03-2014 Reinhard Hahn): created like
# external_xml_input_stream.xml_text_encoding_map 
http_response.define_shared_constant(:text_charset_map,
	equality_hash_table.new_with(
		"utf-8",	:utf8,
		"windows-1252",	:cp1252, 
		"iso-8859-1",	:iso8859_1,
		"iso-8859-2",	:iso8859_2,
		"iso-8859-3",	:iso8859_3,
		"iso-8859-4",	:iso8859_4,
		"iso-8859-5",	:iso8859_5,
		"iso-8859-6",	:iso8859_6,
		"iso-8859-7",	:iso8859_7,
		"iso-8859-8",	:iso8859_8,
		"iso-8859-9",	:iso8859_9,
		"iso-10646-ucs-2",	:ucs2,
		"euc-kr",	:euc_kr, 
		"shift_jis",	:sjis,
		# The windows variant of sjis if required
		# "shift_jis",	:cp932,
		"euc-jp",	:euc_jp),
	:private)
$


_pragma(classify_level=basic, usage={redefinable})
_method http_response.response_status_code
	## 
	## 
	##

	# (06-30-2005 Brad Sileo): created.
	_if .header.empty? 
	_then
		_return "N/A"
	_endif
	>> .header[1].slice_to_end(.header[1].index_of(%space)).as_number()
_endmethod
$
_pragma(classify_level=basic, usage={redefinable})
_method http_response.response_reason_phrase
	## 
	## 
	##

	# (06-30-2005 Brad Sileo): created.
	_if .header.empty? 
	_then
		_return "N/A"
	_endif
	rc << _self.response_status_code.write_string
	>> .header[1].slice_to_end(.header[1].index_of_seq(rc)+1+rc.size)
_endmethod
$
_pragma(classify_level=basic, usage={redefinable})
_method http_response.server_name
	## The type of data shown in my header
	## 
	##

	# (06-29-2005 Brad Sileo): created.
	>> _self.header_value("Server")
_endmethod
$
_pragma(classify_level=basic, usage={redefinable})
_method http_response.header_value(name)
	## returns the name for the header data called NAME
	## 
	##

	# (06-29-2005 Brad Sileo): created.
	_for line _over .header.fast_elements()
	_loop
		#debug show(line.lowercase,name.lowercase,line.lowercase.index_of_seq(name.lowercase))
		_if line.lowercase.index_of_seq(name.lowercase) = 1
		_then
			_return line.slice_to_end(line.index_of(%:)+2)
		_endif
	_endloop
_endmethod
$

_pragma(classify_level=basic, usage={redefinable})
_method http_response.header_parameter(field_name,parameter_name)
	## for _self.header_value(FIELD_NAME) yields value of parameter
	## PARAMETER_NAME if available
	##
	## e.g. with Header entry
	##	"Content-Type: text/xml;charset=UTF-8"
	## the call of
	##	_self.header_parameter("Content-Type","charset")
	## yields
	##	"UTF-8"

	# (04-03-2014 Reinhard Hahn): created
	field_value << _self.header_value(name)
	pos_semicolon << field_value.index_of(%;)
	_loop
		_if pos_semicolon _is _unset _then _leave _endif

		pos_equals << field_value.index_of(%=, pos_semicolon)
		_if pos_equals _is _unset _then _leave _endif

		key << field_value.slice(pos_semicolon+1,pos_equals-1).trim_spaces()

		pos_semicolon << field_value.index_of(%;, pos_equals)

		value << field_value.slice(pos_equals+1,pos_semicolon.default(field_value.size+1)-1)

		_if key.canonical = parameter_name
		_then
			_return value.trim_spaces()
		_endif 
	_endloop
_endmethod
$


_pragma(classify_level=basic, usage={redefinable})
_method http_response.result_string
	## returns the result as a single string
	## 
	##

	# (06-29-2005 Brad Sileo): created.
	#
	# (04-03-2014 Reinhard Hahn): the result is now decoded, if
	# possible. the method may be slow, if content_type isnt "text" 

	_if .text _isnt _unset
	_then
		_return .text
	_endif

	>> _self.int!data(_false)
_endmethod
$

_pragma(classify_level=restricted, usage={redefinable})
_private _method http_response.int!data(single_lines?)
	## yields the result_string, if .text isnt set
	##
	## if SINGLE_LINES? a rope of lines is returned
	# (04-03-2014 Reinhard Hahn): created
	str << internal_text_output_stream.new()
	lines << _if single_lines? _then >> rope.new() _endif 
	_for l _over .raw_data.fast_elements()
	_loop
		c << l.as_character()
		_if c _is _unset _orif c _is %return
		_then
			_continue
		_elif single_lines? _andif c _is %newline
		_then
			lines.add(str.string)
			str.reset()
		_else
			str.write(c)
		_endif
	_endloop
	_if single_lines?
	_then
		lines.add(str.string)
		_return lines
	_else
		_return str.string
	_endif 
_endmethod
$


http_response.define_shared_constant(:xml_content_types,
				     equality_set.new_with(
					     "text/xml",
					     "text/rdf+xml"
						  ),
				     :public)
$
_pragma(classify_level=basic, usage={redefinable})
## Maps content types to document object classes
http_response.define_shared_constant(:xml_document_types,
				     equality_hash_table.new(),
				     :public)
$

_pragma(classify_level=basic, usage={redefinable})
_method http_response.smart_result(_optional content_type_override)
	## Returns a result object best suitable for the content type
	## of the data.
	##
	## Currently handles:
	##   text/html as a string 
	##   text/xml as a simple_xml
	##   image/* as a raster_pattern or path to a file

	# (06-29-2005 Brad Sileo): created.
	#
	# (04-03-2014 Reinhard Hahn): xml type is recognised by the
	# header fields, even if there are additional parameters in
	# this field

	ct << content_type_override.default(_self.content_type_withou_params)
	>> _if _self.xml_content_types.includes?(ct) _orif
	       _self.result_string.slice(1,5) = "<?xml"
	   _then
		   _if (doc_exemplar << _self.xml_document_types[ct]) _isnt _unset
		   _then 
			   doc << doc_exemplar.new(_unset,_unset)
		   _endif 
			   >> simple_xml.read_document_from(_self.result_string.read_stream(),_unset,doc) # FIXME TEST encoding !!
	   _elif (ct << _self.content_type) = "text/html"
	   _then
		   >> _self.result_string
	   _elif ct.index_of_seq("image/") = 1
	   _then
		   >> _self.raster_image()
	   _else 
		   >> _self.result_string
	   _endif
_endmethod
$

_pragma(classify_level=basic, usage={redefinable})
_method http_response.raster_image()
	## returns a raster_image object based on my data, which must
	## be of a type that can be handled by raster_image.new_from_file()
	## for other types, a reference to a file created to represent
	## the image is returned.
	##

	# (06-30-2005 Brad Sileo): created.
	_if (file_part << _self.data_file_name) _is _unset
	_then 
		_if (fw << _self.framework) _isnt _unset 
		_then
			file_part << fw.filename
		_else
			file_part << write_string("http_image.",_self.sub_content_type)
		_endif
	_endif 
	fname << system.name_new_file(system.pathname_from_components(file_part,
								      _self.data_file_path
								      ))
	st << external_binary_output_stream.new(fname)
	ok? << _false 
	_protect
		_for c _over .raw_data.fast_elements()
		_loop
			st.put(c)
		_endloop
		ok? << _true 
	_protection 
		st.close()
	_endprotect
	>> _if ok? _is _true 
	_then
		>> _try
			>> raster_image.new_from_file(fname)
		_when magik_prim_error
			>> fname
		_endtry 
	_endif
_endmethod
$

_pragma(classify_level=basic, usage={redefinable})
_method http_response.show_on(a_stream)
	## 
	## 
	##

	# (06-30-2005 Brad Sileo): created.
	a_stream.write(_self.class_name.default("?"),
		       %(,
		       _self.response_status_code.default("?"),
		       %space,
		       _self.response_reason_phrase.default("?"),
		       %space,
		       %",
		       _self.content_type,
		       %",
		       %)
		 )
_endmethod
$
_pragma(classify_level=basic, usage={redefinable})
_method http_response.data_file_path
	## The path for my output data files, defaults to temp if my
	## proeprty is not set
	## 
	##

	# (06-30-2005 Brad Sileo): created.
	>> _self.property(:data_file_path).default(system.temp_directory_name)
_endmethod
$
_pragma(classify_level=debug, usage={redefinable})
_method http_response.show_header(_optional a_stream)
	## 
	## 
	##displays my header

	# (07-15-2005 Brad Sileo): created.
	_dynamic !output!
	a_stream << a_stream.default(!output!)
	_for elem _over .header.fast_elements()
	_loop
		a_stream.write(elem,%newline)
	_endloop
_endmethod
$
