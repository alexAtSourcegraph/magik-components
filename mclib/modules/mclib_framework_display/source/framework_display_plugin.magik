#% text_encoding = cp1252
########################################################################
##
## Last Saved Time-stamp: <2006-09-23 21:05:28 brad.sileo>
##
## Created By: Brad Sileo
## Date: 07-18-2005
## Copyright 2005 Brad Sileo
##
## This file is part of Magik Components for SWAF.
##
## Magik Components for SWAF is free software; you can redistribute it and/or modify
## modify it under the terms of the GNU Lesser General Public
## License as published by the Free Software Foundation; either
## version 2.1 of the License, or (at your option) any later version.

## This library is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## Lesser General Public License for more details.

## You should have received a copy of the GNU Lesser General Public
## License along with this library; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
##
########################################################################
_package mclib

def_slotted_exemplar(:framework_display_plugin,
		     {
			     {:framework_tree,_unset},
			     {:frameworks,_unset}
		     },
		     {:plugin})
$

framework_display_plugin.define_property(:include_self?,:boolean,
					 "Should I be included when displaying my framework?",
					 _true,_true,_false)
$
framework_display_plugin.define_property(:context,:symbol,
					 "The context for my display trees",
					 _true,_true,_unset)
$

_pragma(classify_level=restricted, usage={redefinable})
_method framework_display_plugin.build_gui(a_parent)
	## 
	## 
	##

	# (07-17-2006 Brad Sileo): created.
	rc << rowcol.new(a_parent,1,_unset,:pixel,
			 :default_row_alignment,:fill,
			 :default_col_alignment,:fill
		     )
	.framework_tree << tree_item.new(rc,
					 :mode,:one,
					 :model,_self,
					 :message_on_no_data?, _true,
					 :select_notifier,handler.new(_self,:tree_select|()|),
					 :editor_required_notifier, handler.new(_self,:|editor_required()|),
					 :value_changed_notifier, handler.new(_self,:|value_changed()|),
					 :edit_on_click?,_true ,
					 :aspect, :display_trees,
					 :column_allow_sort?, _false,
					 :column_headings, { _self.message(:name),_self.message(:value),_self.message(:description)},
					 :column_widths, {100,100,200},
					 
					 :data_selector, :display_trees,
					 :hypertext_click_notifier, handler.new( _self, :hypertext_clicked|()| ),
					 :distribute_spare_width, :always
				     )
_endmethod
$


_pragma(classify_level=restricted, usage={redefinable})
_method framework_display_plugin.display_trees
	## Returns the display trees used to render the tree of my framework.
	## 
	##

	# (07-17-2006 Brad Sileo): created.
	
	res << rope.new()
	_for a_framework _over _self.frameworks.fast_elements()
	_loop
		res.add_last(dt << a_framework.mclib_df!as_display_tree(_self.context))
		_if a_framework _is _self.framework _andif
		    _not _self.include_self?
		_then
			kids << dt.children
			_for a_kid _over kids.fast_elements()
			_loop
				_if a_kid _isnt _unset _andif
				    a_kid.key = _self
				_then
					dt.remove_child(a_kid)
				_endif
			_endloop
		_endif
	_endloop
	>> res
_endmethod
$

_pragma(classify_level=restricted, usage={redefinable})
_method framework_display_plugin.add_framework(a_framework)
	## 
	## 
	##

	# (07-17-2006 Brad Sileo): created.
	_self.add_frameworks({a_framework})
_endmethod
$

_pragma(classify_level=restricted, usage={redefinable})
_method framework_display_plugin.add_frameworks(a_set)
	## 
	## 
	##

	# (07-17-2006 Brad Sileo): created.
	_if .frameworks _is _unset 
	_then
		.frameworks << rope.new()
	_endif
	.frameworks.add_all_last(a_set)
	_self.changed(:display_trees,:renew)
_endmethod
$

_pragma(classify_level=restricted, usage={redefinable})
_method framework_display_plugin.frameworks
	## 
	## 
	##

	# (07-17-2006 Brad Sileo): created.
	_if .frameworks _is _unset 
	_then
		_self.add_framework(_self.framework)
	_endif
	>> .frameworks
_endmethod
$

_pragma(classify_level=restricted, usage={redefinable})
_method framework_display_plugin.tree_select(selection)
	## 
	## 
	##

	# (07-17-2006 Brad Sileo): created.
	#debug show(selection)
_endmethod
$
_pragma(classify_level=restricted, usage={redefinable})
_method framework_display_plugin.hypertext_clicked(a_tree)
	## 
	## 
	##

	# (07-19-2006 Brad Sileo): created.
	item << a_tree.value
	_if item.is_kind_of?(sw_action)
	_then
		item.execute_action()
	_else
		system.do_command("cmd /k start " + item)
		#debug write(path)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, usage={redefinable})
_method framework_display_plugin.init_actions()
	## Create the actions for me
	## 
	##

	# (07-26-2006 Brad Sileo): created.
	_self.add_action(sw_action.new(:refresh,
				       :engine,_self,
				       :action_message,:|refresh()| ,
				       :toolbar_control,:image_button_item ,
				       :image,{:refresh,:ui_resources},
				       :caption,_self.message(:refresh  ),
				       :short_help_text,_self.message(:refresh_sh  ),
				       :tooltip,_self.message(:refresh_tt)  )
	      ) 
_endmethod
$

_pragma(classify_level=restricted, usage={redefinable})
_method framework_display_plugin.refresh()
	## 
	## 
	##

	# (07-26-2006 Brad Sileo): created.
	_self.changed(:display_trees,:renew)
_endmethod
$

_pragma(classify_level=restricted)
_method framework_display_plugin.editor_required(p_tree, p_index, p_value_id, p_agent)
	## returns an in place editor for the value field if appropriate.
	## 
	##

	# (03-31-2005 Brad Sileo): created.
	#debug show(p_tree,p_index,p_value_id,p_agent)
	_if p_value_id _is :value
	_then
		sig << p_tree.value[:signature]
		#debug show(sig.type)
		_if (pt << sig.type) _is :number _orif
		    sig.type _is :integer
		_then
			a_manager << numeric_value_manager.new_with_properties(:integer?,pt _is :integer)
		_elif pt _is :boolean
		_then
			# need a boolean value_manager
			_return
		_elif pt _is :object
		_then
			_return 
		_endif
		a_editor << in_place_value_editor.new(p_agent,
						      :manager,a_manager)
	_endif
 	>> a_editor
_endmethod
$

_pragma(classify_level=advanced)
_method framework_display_plugin.value_changed(p_tree,a_key,new_val,old_val,a_editor)
	## Handles updating property values on callback from an editor
	## 
	##

	# (09-23-2006 Brad Sileo): created.
	p_tree.value[:owner].set_property_value_from_string(p_tree.value[:name],new_val)
	_self.changed(:display_trees,:refresh)
_endmethod
$
