#% text_encoding = iso8859_1
_package user
# Copyright © 2005 Minto Spatial Solutions Ltd.
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the mss product
# directory, and is also available at http://www.fsf.org.

_pragma(classify_level=basic, topic={mss_scheduler})
##
## mss_scheduler_application
##
## Application for handling MSS scheduler processor
## functionality - intended to enable a stand-alone processor
## or reviewer GUI.
##

def_slotted_exemplar(:mss_scheduler_application,
{},
{:application})
$

_pragma(classify_level=basic)
mss_scheduler_application.define_shared_constant(
	:databus_consumer_data_types,
	{:run_status_string, :status_string},
	:public)
$

_pragma(classify_level=restricted, topic={mss_scheduler})
_method mss_scheduler_application.init_actions()
	## 
	## 

	_super.init_actions()

	# Proxy the application exit action to self's close action, to
	# make it easier to share GUIs.
	_self.add_action(sw_proxy_action.new_for(_self.action(:exit), :close))
	
	_self.add_action(sw_action.new(:refresh,
				       :short_help_text, _self.message(:refresh_sh),
				       :image, {:refresh, :ui_resources},
				       :engine, _self,
				       :action_message, :|refresh()|))
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_scheduler})
_method mss_scheduler_application.sw_databus_data_available(data_type_name, data)
	## 
	## Update the status bar to indicate status messages from any
	## plugin.
	##

	_if data_type_name _is :run_status_string
	_then
		_self.update_statusbar(:run_status_string, :text, data)
	_elif data_type_name _is :status_string
	_then
		_self.update_statusbar(:status_string, :text, data)
	_endif
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_scheduler})
_method mss_scheduler_application.refresh()
	## 
	## Ask all plugins to refresh.
	##

	_for i _over _self.plugins()
	_loop
		_if i.responds_to?(:|refresh()|)
		_then
			i.refresh()
		_endif
	_endloop
	
_endmethod
$
