#% text_encoding = iso8859_1
_package user
# Copyright © 2004 Minto Spatial Solutions Ltd.
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the mss product
# directory, and is also available at http://www.fsf.org.

_pragma(classify_level=basic, topic={mss_ptrule})
##
## mss_ptdef_property
##
## Pointing rule property definition.
##

def_slotted_exemplar(:mss_ptdef_property,
{},
{:mss_ptdef_ds_record})
$

_pragma(classify_level=advanced, topic={mss_ptrule})
_method mss_ptdef_property.can_match?(fd)
	## 
	## Derive values for various fields from the actual data model.
	##

	_if {:name, :value}.includes?(fd.name)
	_then
		_return _true
	_endif
	_return _super.can_match?(fd)
		
_endmethod
$

_pragma(classify_level=advanced, topic={mss_ptrule})
_method mss_ptdef_property.match_string(fd, a_string, _optional record)
	## 
	## Derive values for various fields from the actual data model.
	## 

	_if (fdn << fd.name) _is :name
	_then
		_return _self.match_string_property_names(a_string, record)
	_elif fdn _is :value
	_then
		_return _self.match_string_property_values(a_string, record)
	_endif
	_return _super.match_string(fd, a_string, record)
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_ptdef_property.match_string_property_names(a_string, _optional record)
	## 
	## 

	_dynamic !global_auto_declare?! << _false
	
	a_string << a_string.default("")
	len << a_string.size
	record << record.default(_self)

	r << rope.new()

	# N.B.: record can be a record_template, which cannot follow
	# joins directly.  Need to query mss_ptdef table instead.
	# Also, note that due to strangeness in the way that this may
	# be accessed by editors, record can also be a detached record
	# that has not yet been populated (mss_ptdef_id attribute is 0
	# or unset).  So, try to get that from the attached record.
	_if ((parent_id << record.mss_ptdef_id) _is _unset _orif
	     parent_id = 0) _andif
	    (self_id << record.id.default(0)) ~= 0
	_then
		_if (attached_rec << record.source_collection.at(self_id)) _isnt _unset
		_then
			parent_id << attached_rec.mss_ptdef_id
		_endif
	_endif 

	_if parent_id _is _unset _orif
	    (parent << record.source_view.collections[:mss_ptdef].at(parent_id)) _is _unset _orif
	    (ptrule << parent.ptrule_class.evaluate()) _is _unset 
	_then
		_return r
	_endif 

	sc << sorted_collection.new()
	_for i _over ptrule.default_properties.fast_keys_and_elements()
	_loop
		sc.add(i)
	_endloop

	r.add_all_last(sc)
	_return r
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_ptdef_property.match_string_property_values(a_string, _optional record)
	## 
	## 

	_dynamic !global_auto_declare?! << _false
	
	a_string << a_string.default("")
	len << a_string.size
	record << record.default(_self)

	r << rope.new()

	# N.B.: record can be a record_template, which cannot follow
	# joins directly.  Need to query mss_ptdef table instead.
	# Also, note that due to strangeness in the way that this may
	# be accessed by editors, record can also be a detached record
	# that has not yet been populated (mss_ptdef_id attribute is 0
	# or unset).  So, try to get that from the attached record.
	_if ((parent_id << record.mss_ptdef_id) _is _unset _orif
	     parent_id = 0) _andif
	    (self_id << record.id.default(0)) ~= 0
	_then
		_if (attached_rec << record.source_collection.at(self_id)) _isnt _unset
		_then
			parent_id << attached_rec.mss_ptdef_id
		_endif
	_endif 

	_if parent_id _is _unset _orif
	    (parent << record.source_view.collections[:mss_ptdef].at(parent_id)) _is _unset _orif
	    (ptrule << parent.ptrule_class.evaluate()) _is _unset 
	_then
		_return r
	_endif 

	ptypes << ptrule.property_types
	_if (ptype_data << ptypes[record.name.default("").as_symbol()]) _is _unset
	_then
		_return r
	_endif
	_if ptype_data[1] _is :boolean
	_then
		ptype_enumerator << {"true", "false"}
	_elif ptype_data[1] _is :kleenean
	_then
		ptype_enumerator << {"true", "false", "maybe"}
	_elif ptype_data.size > 1
	_then 
		ptype_enumerator << ptype_data[2]
	_endif
	_if ptype_enumerator _isnt _unset
	_then 
		r.add_all_last(ptype_enumerator)
	_endif
	
	_return r
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_ptdef_property.mss_strict_enumeration?(fd)
	## 
	## Don't strictly enforce enumeration on the name or value field.
	##

	_if fd.name _is :name _orif
	    fd.name _is :value
	_then
		_return _false
	_endif
	_return _true
	
_endmethod
$
