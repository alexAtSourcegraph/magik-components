#% text_encoding = iso8859_1
_package user
# Copyright © 2004 Minto Spatial Solutions Ltd.
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the mss product
# directory, and is also available at http://www.fsf.org.

_pragma(classify_level=basic, topic={mss_ptrule})
##
## mss_simple_add_geometry_ptrule
##
## A simple insertion pointing rule which only requires one PDR
## operation. 
##

def_slotted_exemplar(:mss_simple_add_geometry_ptrule,
{},
{:mss_insert_ptrule})
$

_pragma(classify_level=basic, topic={mss_ptrule})
_method mss_simple_add_geometry_ptrule.core_default_properties
	## 
	## 

	_local pl << _super.core_default_properties.copy()
	pl[:subrule_placement_location] << :last_coord
	pl[:subrule_placement_loc_method] << _unset
	pl[:subrule_placement_orientation] << :with_parent
	
	_return pl
	
_endmethod
$

_pragma(classify_level=basic, topic={mss_ptrule})
_method mss_simple_add_geometry_ptrule.core_property_types
	## 
	## 

	_local pl << _super.core_property_types.copy()
	pl[:subrule_placement_location] << {:symbol, {:midpoint, :first_coord, :last_coord, :bounds_center}}
	pl[:subrule_placement_loc_method] << {:symbol}
	pl[:subrule_placement_orientation] << {:symbol, {:with_parent, :with_parent_raw, :zero}}
	
	_return pl
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_simple_add_geometry_ptrule.reinit_one_rule_properties()
	## 
	## 

	pl << _super.reinit_one_rule_properties()
	_if .parent_ptrule _isnt _unset
	_then
		.detached_record << .parent_ptrule.detached_record
	_endif

	_return pl
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_simple_add_geometry_ptrule.prompting_required?(mode)
	## 
	## Adding a geometry never prompts for attributes.
	##

	_return _false 
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_simple_add_geometry_ptrule.insert_enabled?(mode)
	## 
	## 

	_if .parent_ptrule _is _unset _andif
	    .current_record _is _unset
	_then
		_return _false
	_endif 
	_return _super.insert_enabled?(mode)
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_simple_add_geometry_ptrule.ok_for_correlation?(cat, test_corr_geom)
	## 
	## 

	_if .parent_ptrule _isnt _unset
	_then
		# No correlation needed - always attach to parent.
		_return _false
	_endif
	_if .current_record _isnt _unset
	_then
		# No correlation needed - associated with a record already.
		_return _false
	_endif

	# If self's rule is for a specific table, enforce that.
	_if (test_corr_rwo << test_corr_geom.rwo) _is _unset _then _return _false _endif
	_if .detached_record _isnt _unset _andif
	    .detached_record.source_collection _isnt test_corr_rwo.source_collection
	_then
		_return _false
	_endif

	# If the correlated record has no such geometry field, or it is
	# already set, then return.
	_if (gf << test_corr_rwo.geometry_fields[.geometry_name]) _is _unset _orif
	    test_corr_rwo.perform(.geometry_name) _isnt _unset 
	_then
		_return _false
	_endif

	# If not writable, return false.
	_if _not test_corr_rwo.source_view.writable?
	_then
		_return _false
	_endif
	
	_return _true
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_simple_add_geometry_ptrule.int!release(a_window, pos)
	## 
	## 

	_super.int!release(a_window, pos)
	_self.perform_insert(:release, a_window, pos)

_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_simple_add_geometry_ptrule.int!post_release(a_window, pos)
	## 
	## 

	_super.int!post_release(a_window, pos)

	_if _self.get_property(:suspended?) _is _true
	_then
		_return
	_endif
	
	_self.int!restart()

_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_simple_add_geometry_ptrule.int!complete()
	## 
	## 

	_super.int!complete()

	_if _self.insert_enabled?(:complete)
	_then
		_self.perform_insert(:complete)
	_endif
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_simple_add_geometry_ptrule.perform_insert(mode, _optional a_window, pos)
	## 
	## 

	_dynamic !current_world!

	pdr << .pdr_data
	_if mode _is :complete
	_then 
		# N.B.: the only way to enter this code should be by completing
		# a parent pointing rule.
		_if .parent_ptrule _is _unset _orif
		    (cr << .current_record << .parent_ptrule.current_record) _is _unset 
		_then
			_return
		_endif
	_else
		# Prerequisites for insert on release: either get owning RWO,
		# or get RWO from correlation.
		_if .parent_ptrule _is _unset _andif
		    .current_record _is _unset
		_then
			# Require a correlation to have been made.
			_if (corr_geom << pdr[:last_correlation_geometry]) _is _unset
			_then
				condition.raise(:user_error, :string, _self.message(:no_correlated_object_for_add_geometry))
			_endif
			.current_record << corr_geom.rwo
			.one_shot_properties[:suspended?] << _true
			_return 
		_endif

		_if _not _self.insert_enabled?(:release)
		_then
			_return
		_endif
		
		_if .parent_ptrule _isnt _unset
		_then
			cr << .current_record << .parent_ptrule.current_record
		_else
			cr << .current_record
		_endif 
		_if cr _is _unset
		_then
			condition.raise(:user_error, :string, _self.message(:no_object_for_add_geometry))
		_endif
	_endif

	the_world << _unset 
	_if .detached_geometry _is _unset
	_then
		# Can't get world here, but should be able to get it from parent.
		_if .parent_ptrule.responds_to?(:|geometry_sectors_for_relative_insert()|)
		_then
			(x, x, the_world) << .parent_ptrule.geometry_sectors_for_relative_insert()
		_endif 
	_else 
		the_world << .detached_geometry.world.world_for_dataset(.current_record.source_view)
	_endif
	
	_if the_world _is _unset
	_then
		condition.raise(:user_error, :string, _self.message(:cannot_determine_world))
	_endif
	!current_world! << the_world

	geom_fd << cr.all_fields[.geometry_name]
	_self.check_write_authorised()

	# Special processing if subrule_placement_location property is
	# specified.
	geom_data << _unset
	_if .parent_ptrule _isnt _unset
	_then
		geom_data << _self.figure_subrule_placement_location()
	_endif

	_if geom_data _isnt _unset
	_then
		# Apply the special placement relative to parent.
		_if geom_fd.geom_category _is :text
		_then
			new_geom << cr.make_geometry(.geometry_name, geom_data,
						     cr.text_for(.geometry_name).default(""))
			_if (just << _self.get_property(:text_justification)) _isnt _unset
			_then
				new_geom.justification << just
			_endif
		_else 
			new_geom << cr.make_geometry(.geometry_name, geom_data)
		_endif
	_else
		# Just manipulate the detached geometry.
		wrk_geom << .detached_geometry.transformed(pdr[:transform])
		
		# For a text geometry, must re-get the string to reflect what
		# the user has entered for attributes.
		_if wrk_geom.geom_category _is :text
		_then
			wrk_geom.string << cr.text_for(.geometry_name).default("")
		_endif 
		new_geom << cr.make_geometry(.geometry_name, wrk_geom)
	_endif
	
_endmethod
$
