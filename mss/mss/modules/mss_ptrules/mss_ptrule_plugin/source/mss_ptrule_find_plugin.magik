#% text_encoding = iso8859_1
_package user
# Copyright © 2007 Minto Spatial Solutions Ltd.
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the mss product
# directory, and is also available at http://www.fsf.org.

_pragma(classify_level=basic, topic={mss_ptrule})
##
## mss_ptrule_find_plugin
##
## Plugin to find pointing rules by name. 
##

def_slotted_exemplar(:mss_ptrule_find_plugin,
{
},
{:plugin})
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_ptrule_find_plugin.init_actions()
	## 
	## 

	_self.add_action(sw_action.new(:find_string,
				       :engine, _self,
				       :value, "",
				       :toolbar_control, {:text_item, :display_length, 12}))
	_self.add_action(sw_action.new(:find_next,
				       :image, {:find, :ui_resources},
				       :engine, _self,
				       :action_message, :|find_next()|))
	_self.add_action(sw_action.new(:find_all,
				       :image, {:list, :ui_resources},
				       :engine, _self,
				       :action_message, :|find_all()|))
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_ptrule_find_plugin.find_next()
	## 
	## Perform a search for the next pointing rule (or folder) that
	## matches the current find_string value.
	##

	str << _self.figure_find_string(_true)
	_if (p << _self.databus_request_data(:ptrule_plugin)) _isnt _unset
	_then
		p.find_next_ptdef_list_entry_by_name(str)
	_endif
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_ptrule_find_plugin.figure_find_string(wildcards?)
	## 
	## Return a string to use for searching, or raise an error if
	## not entered.  The string will automatically be wildcarded at
	## the start and end if WILDCARDS? is true.
	##

	v << _self.action(:find_string).value
	_if v _is _unset _orif v = ""
	_then
		condition.raise(:user_error, :string, _self.message(:no_find_string_entered))
	_endif
	_if wildcards? _is _true _andif v.first _isnt %*
	_then
		v << write_string("*", v)
	_endif
	_if wildcards? _is _true _andif v.last _isnt %*
	_then
		v << write_string(v, "*")
	_endif

	_return v
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_ptrule_find_plugin.find_all()
	## 
	## Activate a dialog to find all matching pointing rules.
	##

	desc << _self.figure_find_string(_false)
	_if (p << _self.databus_request_data(:ptrule_plugin)) _is _unset
	_then
		_return
	_endif 
	
	_if (m << _self.get_dialog(:mss_ptrule_find_all_dialog)) _is _unset
	_then
		m << mss_ptrule_find_all_dialog.new_dialog(p, p)
		_if p _isnt _unset _andif
		    (ti << p.ptdef_list_tree_item) _isnt _unset
		_then
			m.activate_relative_to(_unset, ti, 5, 5)
		_else
			m.activate()
		_endif
		_self.cache_dialog(:mss_ptrule_find_all_dialog, m)
	_else
		m.reactivate()
	_endif
	m.set_find_string(desc)
	
_endmethod
$
