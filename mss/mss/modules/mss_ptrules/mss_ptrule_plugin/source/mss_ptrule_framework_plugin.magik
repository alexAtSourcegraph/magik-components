#% text_encoding = iso8859_1
_package user
# Copyright © 2004 Minto Spatial Solutions Ltd.
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the mss product
# directory, and is also available at http://www.fsf.org.

_pragma(classify_level=basic, topic={mss_ptrule})
##
## mss_ptrule_framework_plugin
##
## Plugin devoted to embedding an mss_ptrule_framework within a
## main application framework.
##

def_slotted_exemplar(:mss_ptrule_framework_plugin,
{
	{:embedded_gui, _unset}
},
{:plugin})
$

_pragma(classify_level=basic, topic={mss_ptrule})
## Name of the root pointing definition folder.
mss_ptrule_framework_plugin.define_property(
	:root_ptdef_folder,
	:string,
	"Name of root pointing definition folder",
	_false, _true, "")
$

_pragma(classify_level=basic, topic={mss_ptrule})
## Name of the gui definition file.  Defaults to "gui.xml".
mss_ptrule_framework_plugin.define_property(
	:gui_definition_file_name,
	:string,
	"Name of the gui definition file",
	_false, _false, "gui.xml")
$

_pragma(classify_level=basic, topic={mss_ptrule})
## Name of the module in which the gui definition is located.
mss_ptrule_framework_plugin.define_property(
	:gui_definition_module_name,
	:string,
	"Name of module in which gui definition is located")
$

_pragma(classify_level=basic, topic={mss_ptrule})
## Name of the config definition file.  Defaults to "config.xml".
mss_ptrule_framework_plugin.define_property(
	:config_definition_file_name,
	:string,
	"Name of the config definition file",
	_false, _false, "config.xml")
$

_pragma(classify_level=basic, topic={mss_ptrule})
## Name of the module in which the config definition is located.
mss_ptrule_framework_plugin.define_property(
	:config_definition_module_name,
	:string,
	"Name of module in which config definition is located")
$

_pragma(classify_level=basic, topic={mss_ptrule})
_method mss_ptrule_framework_plugin.gui_definition_module_name
	## 
	## Use property (if defined), otherwise just use module name.
	##

	_return _self.property(:gui_definition_module_name).default(_self.module_name)
	
_endmethod
$

_pragma(classify_level=basic, topic={mss_ptrule})
_method mss_ptrule_framework_plugin.config_definition_module_name
	## 
	## Use property (if defined), otherwise just use module name.
	##

	_return _self.property(:config_definition_module_name).default(_self.module_name)
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_ptrule_framework_plugin.init_actions()
	## 
	## Create an action for activating the framework.
	##
	
	_self.add_action(sw_action.new(:activate_mss_ptrule_framework,
				       :engine, _self,
				       :action_message, :|activate_dialog()|))
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_ptrule_framework_plugin.activate_dialog()
	## 
	## Activate the framework.
	##

	_if (m << _self.get_dialog(:mss_ptrule_framework)) _is _unset
	_then
		m << mss_ptrule_framework.new(
			     :mss_ptrule_framework, _self,
			     :config_definition_module_name, _self.config_definition_module_name,
			     :config_definition_file_name, _self.config_definition_file_name,
			     :gui_definition_module_name, _self.gui_definition_module_name,
			     :gui_definition_file_name, _self.gui_definition_file_name,
			     :root_ptdef_folder, _self.root_ptdef_folder)
		
		_self.cache_dialog(:mss_ptrule_framework, m)
	_endif
	m.activate(_self.top_frame, _self.message(:mss_ptrule_framework_title))
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_ptrule_framework_plugin.reset()
	## 
	## 

	_super.reset()
	_if .embedded_gui _isnt _unset
	_then
		.embedded_gui.reset()
	_endif
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_ptrule_framework_plugin.build_gui(container, _optional xml_element)
	## 
	## Standard build_gui() method, to embed a mss_ptrule_framework.
	##

	_if .embedded_gui _isnt _unset
	_then
		# Already built - notify the configurer.
		condition.raise(:plugin_only_one_gui,
				:framework_class, .embedded_gui.class_name,
				:plugin_class, _self.class_name)
	_endif

	m << mss_ptrule_framework.new(
		     :embedded_mss_ptrule_framework, _self,
		     :config_definition_module_name, _self.config_definition_module_name,
		     :config_definition_file_name, _self.config_definition_file_name,
		     :gui_definition_module_name, _self.gui_definition_module_name,
		     :gui_definition_file_name, _self.gui_definition_file_name,
		     :root_ptdef_folder, _self.root_ptdef_folder)
	
	p << m.build_gui(container)
	p.tab_label << _self.message(:mss_ptrule_framework_tab_label)
	.embedded_gui << m

	_return p
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_ptrule})
_method mss_ptrule_framework_plugin.terminate()
	## 
	## 

	_if (m << _self.get_dialog(:mss_ptrule_framework)) _isnt _unset
	_then
		m.terminate()
	_endif
	_if (m2 << .embedded_gui) _isnt _unset
	_then
		m2.terminate()
	_endif

	_self.clear_dialog_cache()
	
_endmethod
$
