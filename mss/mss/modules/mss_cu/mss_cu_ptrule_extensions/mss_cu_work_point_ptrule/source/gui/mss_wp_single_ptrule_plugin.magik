#% text_encoding = iso8859_1
_package user
# Copyright © 2005 Minto Spatial Solutions Ltd.
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the mss product
# directory, and is also available at http://www.fsf.org.

_pragma(classify_level=basic, topic={mss_cu, mss_ptrule})
##
## mss_cu_wp_single_ptrule_plugin
##
## Subclass of mss_ptrule_gui_plugin to prompt for work point
## information to create a single work point.
##

def_slotted_exemplar(:mss_wp_single_ptrule_plugin,
{
	{:items, _unset, :readable}
},
{:mss_ptrule_gui_plugin})
$

mss_ptrule_manager.defined_ptrule_gui_plugins[:mss_wp_single_ptrule_plugin] << mss_wp_single_ptrule_plugin
$

_pragma(classify_level=restricted, topic={mss_cu, mss_ptrule})
_method mss_wp_single_ptrule_plugin.build_gui(a_container)
	## 
	## 

	.items << property_list.new()
	
	p << panel.new(a_container)
	p.height_spacing << p.width_spacing << 6
	p.border_width << p.border_height << 2
	
	p.start_row()
	label_item.new(p, _self.message(:header_information))
	
	p.start_row()
	rc << rowcol.new(p, _unset, 3, :pixel, :row_spacing, 6, :col_spacing, 6, :outer_spacing, 0)
	label_item.new(rc, _self.message(:prefix))
	.items[:prefix] << text_item.new(rc, "",
					 :display_length, 4,
					 :max_length, 4)
	label_item.new(rc, "")

	label_item.new(rc,_self.message(:number))
	.items[:number] << text_item.new(rc, "",
					 :display_length, 16,
					 :max_length, 16)
	button_item.new_safe(rc, _self.message(:get_next_available_number),
			     _self, :|get_next_available_number()|,
			     :min_width, 75)
	
	_return p
	
_endmethod
$

_pragma(classify_level=basic, topic={mss_cu, mss_ptrule})
_method mss_wp_single_ptrule_plugin.input_value(field_name)
	## 
	## 

	_if .items _isnt _unset _andif
	    (x << .items[field_name]) _isnt _unset
	_then
		_return x.value
	_endif
	
_endmethod
$

_pragma(classify_level=basic, topic={mss_cu, mss_ptrule})
_method mss_wp_single_ptrule_plugin.get_next_available_number(_optional skip_errors?)
	## 
	## Update the number field with the next available work point
	## number.  If SKIP_ERRORS? is true, do not raise any error
	## conditions if this cannot be performed.
	##

	_if (n_str << _self.input_value(:number).default("").write_string) = ""
	_then
		n << 1
	_else
		n << n_str.as_number()
		_if n.species _isnt 1.species _orif
		    n.write_string ~= n_str
		_then
			_if skip_errors? _is _true _then _return _endif 
			condition.raise(:user_error, :string, _self.message(:number_must_be_integer))
		_endif
	_endif

	p_str << _self.input_value(:prefix).default("")
	next_val << mss_cu_engine.next_available_work_point_number(p_str, n)
	.items[:number].value << next_val.write_string
	_return next_val
	
_endmethod
$
