#% text_encoding = iso8859_1
_package user
# Copyright © 2005 Minto Spatial Solutions Ltd.
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the mss product
# directory, and is also available at http://www.fsf.org.

_pragma(classify_level=basic, topic={mss_cu})
##
## mss_cu_cost_group_config_plugin
##
## Plugin to allow display and editing of Compatible Unit
## cost groups.
##

def_slotted_exemplar(:mss_cu_cost_group_config_plugin,
{
	{:sorter, _unset, :readable},
	{:cu_list, _unset, :readable}
},
{:mss_cu_general_config_plugin})
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.init(name, a_framework)
	##
	##

	_super.init(name, a_framework)
	.items << property_list.new()
	_self.set_option(:filter_cu_code, _self.message(:default_filter_cu_code))
	_self.set_option(:filter_description, "")
	_self.set_option(:current_cu_cost_group, 0)
	.sorter << sorted_collection.new(10, _self.standard_sort_proc)
	.cu_list << rope.new()
	
	_return _self
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.init_actions()
	## 
	## 

	_self.add_action(sw_action.new(:refresh,
				       :engine, _self,
				       :action_message, :|refresh()|))
	_self.add_action(sw_action.new(:edit_selected_cu_cost_group,
				       :engine, _self,
				       :action_message, :|edit_selected_cu_cost_group()|))
	_self.add_action(sw_action.new(:edit_selected_cu_cost_group_item,
				       :engine, _self,
				       :action_message, :|edit_selected_cu_cost_group_item()|))
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.build_gui(a_container)
	## 
	## 

	main_p << panel.new(a_container)
	main_p.border_width << main_p.border_height << 0
	main_p.height_spacing << 0
	main_p.width_spacing << 0
	main_p.resize_x? << main_p.resize_y? << _true
	main_p.tab_label << _self.message(:tab_label)
	.items[:top_panel] << main_p

	ps << :|perform_safely()|
	go << :|get_option()|
	so << :|set_option()|
	
	p << panel.new(main_p)
	p.border_width << p.border_height << 2
	p.height_spacing << 2
	p.width_spacing << 6
	p.resize_x? << p.resize_y? << _false

	p.start_row()
	rc1 << rowcol.new(p, _unset, 2, :pixel, :row_spacing, 2, :col_spacing, 6, :outer_spacing, 0)
	label_item.new(rc1, _self.message(:current_cu_cost_group))

	sub_p1 << panel.new(rc1)
	sub_p1.border_width << sub_p1.border_height << 0
	.items[:current_cu_cost_group] <<
		text_choice_item.new(sub_p1, "",
				     :items, _self.current_cu_cost_group_choices,
				     :model, _self,
				     :aspect, :current_cu_cost_group,
				     :change_selector, {ps, :|current_cu_cost_group<<|},
				     :value_selector, {go, :current_cu_cost_group})
	
	p.start_row()
	label_item.new(rc1, _self.message(:filter_cu_code))
	sub_p2 << panel.new(rc1)
	sub_p2.border_width << sub_p2.border_height << 0
	.items[:filter_cu_code] <<
		text_item.new(sub_p2, "",
			      :display_length, 12,
			      :model, _self,
			      :aspect, :filter_cu_code,
			      :change_selector, {ps, so, :filter_cu_code},
			      :value_selector, {go, :filter_cu_code})
	
	.items[:filter_description] <<
		text_item.new(sub_p2, _self.message(:filter_description),
			      :display_length, 20,
			      :model, _self,
			      :aspect, :filter_description,
			      :change_selector, {ps, so, :filter_description},
			      :value_selector, {go, :filter_description})

	.items[:perform_filter] <<
		button_item.new_safe(sub_p2, _self.message(:perform_filter),
				     _self, :|perform_filter()|,
				     :min_width, 75)
	
	p2 << panel.new(main_p)
	p2.set_right_of(_unset)
	p2.set_below(p)
	p2.border_width << p2.border_height << 2
	p2.height_spacing << 2
	p2.width_spacing << 6
	p2.resize_x? << p2.resize_y? << _true
	
	.items[:cu_list] << ti <<
		tree_item.new(p2,
			      :grid_lines?, _true,
			      :model, _self,
			      :aspect, :cu_list,
			      :data_selector, :cu_list,
			      :select_notifier, {ps, :|cu_list_select()|},
			      :double_click_notifier, {ps, :|cu_list_double_click()|},
			      :height_in_chars, 16,
			      :column_widths, {120, 80, 200, 80, 80},
			      :column_headings, {_self.message(:ch_cu_code),
						 _self.message(:ch_operation),
						 _self.message(:ch_description),
						 _self.message(:ch_material_cost),
						 _self.message(:ch_labor_cost)},
			      :column_allow_sort?, _false,
			      :mode, :one,
			      :resize_x?, _true,
			      :resize_y?, _true)
	.items[:cu_list].popup_menu << _self.framework.popup_for_child(.items[:cu_list], "cu_cost_group_config")

	sh << ti.style_holder
	ndec << mss_cu_operation_definition.material_cost_decimal_places
	sh.add_value_formatter(:material_cost, float_format.new_with_properties(:float_decimal_places, ndec))
	ndec << mss_cu_operation_definition.labor_cost_decimal_places
	sh.add_value_formatter(:labor_cost, float_format.new_with_properties(:float_decimal_places, ndec))

	_return main_p

_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.pre_activation()
	## 
	## 

	mss_cu_engine.view.add_dependent(_self, :view)
	mss_cu_engine.view.add_observer(_self, {:insert, :update, :post_delete},
					{:mss_cu_cost_group})
	mss_cu_engine.view.add_observer(_self, {:insert, :update, :post_delete},
					{:mss_cu_cost_group_item})
	_super.pre_activation()
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.post_activation()
	## 
	## 

	_super.post_activation()
	_self.handle_cu_cost_group_change()
	_self.manage_actions_for_cu_list_selection()
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.terminate()
	## 
	## 

	mss_cu_engine.view.remove_dependent(_self, :view)
	mss_cu_engine.view.remove_observer(_self, {:insert, :update, :post_delete},
					   {:mss_cu_cost_group})
	mss_cu_engine.view.remove_observer(_self, {:insert, :update, :post_delete},
					   {:mss_cu_cost_group_item})
	_super.terminate()
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.note_change(who, what, _gather data)
	## 
	## 

	_dynamic !mss_cu_property_config_ignore_notification?!

	_super.note_change(who, what, _scatter data)
	_if who _is mss_cu_engine.view
	_then
		_if {:insert, :update, :post_delete}.includes?(what) _andif
		    !mss_cu_property_config_ignore_notification?! _isnt _true 
		_then 
			tbl << data[1]
			_if tbl.name _is :mss_cu_cost_group_item
			_then
				# Note that this is not a complete refresh, which could get
				# slow to manage.  Just refresh the current selected item,
				# which will normally be the one that the user just edited.
				_self.update_cu_selection_properties()
			_endif
		_endif 
	_endif 
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.current_cu_cost_group << a_rec_or_id
	## 
	## Set the current_cu_cost_group property to A_REC_OR_ID -
	## either a database record, or the ID of a record.
	##

	# Note that this is a change from the superclass - it clears
	# cu_list if a change happens.
	
	_if a_rec_or_id.is_a_datastore_object?
	_then
		new_id << a_rec_or_id.id
	_else
		new_id << a_rec_or_id
	_endif
	_if new_id ~= _self.get_option(:current_cu_cost_group)
	_then
		_self.set_option(:current_cu_cost_group, new_id)
		.cu_list.empty()
		_self.changed(:cu_list, :renew)
		_self.status_string << ""
	_endif
	_return a_rec_or_id
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.cu_list_select(selection, user_sel?)
	## 
	## 

	_self.update_cu_selection_properties()
	_self.manage_actions_for_cu_list_selection()
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.cu_list_double_click(selection)
	## 
	## Activate the CU cost group item editor when a row is
	## double clicked.
	##
	
	_self.update_cu_selection_properties(selection)
	_self.edit_selected_cu_cost_group_item(selection)
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.update_cu_selection_properties(_optional sel)
	## 
	## Update the properties of the display tree SEL (defaults to
	## self.selected_cu_list).
	##

	_if sel _is _unset _andif
	    (sel << _self.selected_cu_list) _is _unset
	_then
		_return
	_endif

	val << sel.value
	_if (cg << val[:cu_cost_group]) _isnt _unset _andif cg.is_valid? _andif
	    (op << val[:cu_operation_definition]) _isnt _unset _andif op.is_valid?
	_then
		_if (old_cgi << val[:cu_cost_group_item]) _isnt _unset _andif
		    _not old_cgi.is_valid?
		_then
			old_cgi << _unset
		_endif 
		_if (new_cgi << op.cu_cost_group_item_for(cg)) _isnt _unset
		_then
			new_material_cost << new_cgi.material_cost
			new_labor_cost << new_cgi.labor_cost
		_else
			new_material_cost << _unset 
			new_labor_cost << _unset
		_endif

		_if new_cgi ~= old_cgi _orif
		    new_material_cost ~= val[:material_cost] _orif
		    new_labor_cost ~= val[:labor_cost]
		_then
			val[:cu_cost_group_item] << new_cgi
			val[:material_cost] << new_material_cost
			val[:labor_cost] << new_labor_cost
			_self.changed(:cu_list)
		_endif 
	_endif 
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.set_cu_list()
	## 
	## Build the list of CUs.
	##

	# Note: unlike the mss_cu_property_config_plugin, this is not
	# attempting to maintain a "live" list of datastore records -
	# this value of each display_tree is static, so I don't really
	# have to use a sorter and then transfer everything to the
	# cu_list.  But, I'm keeping that here in case I ever want this
	# to be a "live" list later.
	sc << .sorter
	sc.empty()

	tbl << mss_cu_engine.view.collections[:mss_cu_definition]
	cg_id << _self.get_option(:current_cu_cost_group)
	sel_cost_group << _self.selected_cu_cost_group
	max_to_do << _self.max_to_report
	max_exceeded? << _false
	
	sstr << {:value, :cu_code, :tab,
		 :value, :operation, :tab,
		 :value, :description, :tab,
		 :value, :material_cost, :tab,
		 :value, :labor_cost}

	pred << _self.figure_filter_predicate()
	_for i _over tbl.select(pred).fast_elements()
	_loop @outer
		_if (cu_code << i.cu_code) _is _unset
		_then
			_continue
		_endif
		_for j _over i.mss_cu_operation_definitions.fast_elements()
		_loop
			op << j.operation.default("").as_charvec()
			cgi_rec << j.cu_cost_group_item_for(cg_id)
			_if sc.size >= max_to_do
			_then
				max_exceeded? << _true
				_leave @outer
			_endif 
			sc.add({{mss_cu_holder.cu_code_sort_key(cu_code), {op}}, i, j, cgi_rec})
		_endloop
	_endloop

	cus << .cu_list
	cus.empty()
	_for i _over sc.fast_elements()
	_loop
		cu_rec << i[2]
		cu_op_rec << i[3]
		cgi_rec << i[4]
		pl << property_list.new_with(
			      :cu_code, cu_rec.cu_code.default("").as_charvec(),
			      :operation, cu_op_rec.operation.default("").as_charvec(),
			      :description, cu_rec.description.default("").as_charvec())
		_if cgi_rec _isnt _unset
		_then
			pl[:material_cost] << cgi_rec.material_cost
			pl[:labor_cost] << cgi_rec.labor_cost
		_endif
		pl[:cu_definition] << cu_rec
		pl[:cu_operation_definition] << cu_op_rec
		pl[:cu_cost_group_item] << cgi_rec
		pl[:cu_cost_group] << sel_cost_group
		dt << display_tree.new(cu_op_rec.id, pl)
		dt.styled_string << sstr
		cus.add(dt)
	_endloop
	
	_self.changed(:cu_list, :refresh)
	_return .cu_list, max_exceeded?
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.perform_filter()
	## 
	## Perform filtering based on predicate entered.
	##

	_if _self.get_option(:current_cu_cost_group).default(0) = 0
	_then
		condition.raise(:user_error, :string, _self.message(:no_current_cu_cost_group))
	_endif
	
	_self.status_string << _self.message(:filtering)
	(new_list, max_exceeded?) << _self.set_cu_list()
	_if max_exceeded? _is _true
	_then 
		_self.status_string << _self.message(:filter_complete_max, .cu_list.size, .cu_list.size)
	_else
		_self.status_string << _self.message(:filter_complete, .cu_list.size)
	_endif 
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.set_proxy_actions_for_active_page(a_page, pl)
	## 
	## Set any proxy actions in property list PL when A_PAGE
	## becomes the current page on the main tab control.
	## 

	_if a_page _is .items[:top_panel]
	_then
		pl[:refresh] << _self.action(:refresh)
		pl[:edit_selected_cu_cost_group] << _self.action(:edit_selected_cu_cost_group)
	_endif 
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.selected_cu_list
	## 
	## 

	_if (ti << .items[:cu_list]) _isnt _unset
	_then
		_return ti.selection.an_element()
	_endif 
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.manage_actions_for_cu_list_selection()
	## 
	## 

	cur_sel << _self.selected_cu_list
	_self.action(:edit_selected_cu_cost_group_item).enabled? << cur_sel _isnt _unset 
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.refresh()
	## 
	## Update all displayed lists.
	##

	_self.handle_cu_cost_group_change()
	
	# Remove deleted records from list.
	cul << .cu_list
	_for i _over cul.size.downto(1)
	_loop
		val << cul[i].value
		_if (cu_rec << val[:cu_definition]) _is _unset _orif
		    _not cu_rec.is_valid? _orif
		    (cu_op_rec << val[:cu_operation_definition]) _is _unset _orif
		    _not cu_op_rec.is_valid? 
		_then
			cul.remove_nth(i)
			_continue
		_endif
		val[:cu_code] << cu_rec.cu_code.default("").as_charvec()
		val[:operation] << cu_op_rec.operation.default("").as_charvec()
		val[:description] << cu_rec.description.default("").as_charvec()
		
		_if (cgi_rec << val[:cu_cost_group_item]) _is _unset _orif
		    _not cgi_rec.is_valid?
		_then
			val[:material_cost] << _unset
			val[:labor_cost] << _unset
		_else
			val[:material_cost] << cgi_rec.material_cost
			val[:labor_cost] << cgi_rec.labor_cost
		_endif
	_endloop

	_self.changed(:cu_list, :refresh)
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.edit_selected_cu_cost_group()
	## 
	## 

	rec << _self.selected_cu_cost_group
	_if rec _is _unset
	_then
		_self.framework.activate_editor_for_table(:mss_cu_cost_group)
	_else
		_self.framework.activate_editor_for_object(rec)
	_endif
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_cost_group_config_plugin.edit_selected_cu_cost_group_item(_optional sel)
	## 
	## 

	_if sel _is _unset _andif
	    (sel << _self.selected_cu_list) _is _unset
	_then
		condition.raise(:user_error, :string, _self.message(:no_selected_cu_list))
	_endif
	val << sel.value
	_if (cgi_rec << val[:cu_cost_group_item]) _is _unset _orif
	    _not cgi_rec.is_valid?
	_then
		cu_op_rec << val[:cu_operation_definition]
		cg_rec << val[:cu_cost_group]
		ed << _self.framework.activate_editor_for_table(:mss_cu_cost_group_item)
		pl << property_list.new_with(:mss_cu_cost_group, cg_rec,
					     :mss_cu_operation_definition, cu_op_rec)
		ed.databus.make_data_available(:proposed_values, pl)
	_else
		_self.framework.activate_editor_for_object(cgi_rec)
	_endif
	
_endmethod
$
