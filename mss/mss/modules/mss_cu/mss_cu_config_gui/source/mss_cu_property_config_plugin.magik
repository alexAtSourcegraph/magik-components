#% text_encoding = iso8859_1
_package user
# Copyright © 2005 Minto Spatial Solutions Ltd.
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the mss product
# directory, and is also available at http://www.fsf.org.

_pragma(classify_level=basic, topic={mss_cu})
##
## mss_cu_property_config_plugin
##
## Plugin to allow display and editing of Compatible Unit
## properties.
##

def_slotted_exemplar(:mss_cu_property_config_plugin,
{
	{:sorter, _unset, :readable},
	{:cu_list, _unset, :readable}
},
{:mss_cu_general_config_plugin})
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.init(name, a_framework)
	##
	##

	_super.init(name, a_framework)
	_self.set_option(:filter_cu_code, _self.message(:default_filter_cu_code))
	_self.set_option(:filter_description, "")
	.sorter << sorted_collection.new(10, _self.standard_sort_proc)
	.cu_list << rope.new()

	_return _self

_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.init_actions()
	## 
	## 

	_self.add_action(sw_action.new(:refresh,
				       :engine, _self,
				       :action_message, :|refresh()|))
	_self.add_action(sw_action.new(:edit_selected_cu_definition,
				       :engine, _self,
				       :action_message, :|edit_selected_cu_definition()|))
	_self.add_action(sw_action.new(:edit_selected_cu_properties,
				       :engine, _self,
				       :action_message, :|edit_selected_cu_properties()|))
	_self.add_action(sw_action.new(:clone_selected_cu_definition,
				       :engine, _self,
				       :action_message, :|clone_selected_cu_definition()|))

_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.build_gui(a_container)
	## 
	## 

	main_p << panel.new(a_container)
	main_p.border_width << main_p.border_height << 0
	main_p.height_spacing << 0
	main_p.width_spacing << 0
	main_p.resize_x? << main_p.resize_y? << _true
	main_p.tab_label << _self.message(:tab_label)
	.items[:top_panel] << main_p

	ps << :|perform_safely()|
	go << :|get_option()|
	so << :|set_option()|
	
	p << panel.new(main_p)
	p.border_width << p.border_height << 2
	p.height_spacing << 2
	p.width_spacing << 6
	p.resize_x? << p.resize_y? << _false

	p.start_row()
	.items[:filter_cu_code] <<
		text_item.new(p, _self.message(:filter_cu_code),
			      :display_length, 12,
			      :model, _self,
			      :aspect, :filter_cu_code,
			      :change_selector, {ps, so, :filter_cu_code},
			      :value_selector, {go, :filter_cu_code})

	.items[:filter_description] <<
		text_item.new(p, _self.message(:filter_description),
			      :display_length, 20,
			      :model, _self,
			      :aspect, :filter_description,
			      :change_selector, {ps, so, :filter_description},
			      :value_selector, {go, :filter_description})

	.items[:perform_filter] <<
		button_item.new_safe(p, _self.message(:perform_filter),
				     _self, :|perform_filter()|,
				     :min_width, 75)
	
	p2 << panel.new(main_p)
	p2.set_right_of(_unset)
	p2.set_below(p)
	p2.border_width << p2.border_height << 2
	p2.height_spacing << 2
	p2.width_spacing << 6
	p2.resize_x? << p2.resize_y? << _true
	
	.items[:cu_list] <<
		tree_item.new(p2,
			      :grid_lines?, _true,
			      :model, _self,
			      :aspect, :cu_list,
			      :data_selector, :cu_list,
			      :key_equals_proc, tree.valid_key_equals_proc,
			      :select_notifier, {ps, :|cu_list_select()|},
			      :double_click_notifier, {ps, :|cu_list_double_click()|},
			      :height_in_chars, 16,
			      :column_widths, {120, 350},
			      :column_headings, {_self.message(:ch_cu_code),
						 _self.message(:ch_description)},
			      :column_allow_sort?, _false,
			      :mode, :one,
			      :resize_x?, _true,
			      :resize_y?, _true)
	.items[:cu_list].popup_menu << _self.framework.popup_for_child(.items[:cu_list], "cu_property_config")

	_return main_p

_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.clear_dialog_cache()
	## 
	## Quit dialogs rather than suspending them with close().
	##

	_for a_dialog _over _self.dialogs.fast_elements()
	_loop
		a_dialog.quit(_true)
	_endloop
	_self.dialogs.empty()
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.on_deactivation()
	## 
	## Suspend dialogs on deactivation.
	##

	_super.on_deactivation()
	_for a_dialog _over _self.dialogs.fast_elements()
	_loop
		a_dialog.suspend()
	_endloop
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.field_accessor(p_new_val, p_field_name, p_tree)
	## 
	## Handler method to dynamically get a field value for a
	## display tree.
	## 

	my_rec << p_tree.key
	_if _not my_rec.is_valid?
	_then
		_if p_field_name _is :cu_code
		_then
			_return _self.message(:deleted)
		_else
			_return ""
		_endif 
	_endif 

	_return my_rec.perform(p_field_name)
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.pre_activation()
	## 
	## 

	mss_cu_engine.view.add_dependent(_self, :view, :mode)
	mss_cu_engine.view.add_observer(_self, {:insert, :update, :pre_delete},
					{:mss_cu_definition})
	_super.pre_activation()
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.post_activation()
	## 
	## 

	_super.post_activation()
	_self.manage_actions_for_cu_list_selection()
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.terminate()
	## 
	## 

	mss_cu_engine.view.remove_dependent(_self, :view, :mode)
	mss_cu_engine.view.remove_observer(_self, {:insert, :update, :pre_delete},
					   {:mss_cu_definition})
	_super.terminate()
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.note_change(who, what, _gather data)
	## 
	## 

	_dynamic !mss_cu_property_config_ignore_notification?!

	_super.note_change(who, what, _scatter data)
	_if who _is mss_cu_engine.view
	_then
		_if {:insert, :update, :pre_delete}.includes?(what) _andif
		    !mss_cu_property_config_ignore_notification?! _isnt _true 
		_then 
			tbl << data[1]
			_if tbl.name _is :mss_cu_definition
			_then
				_if what _is :insert
				_then
					_self.note_cu_definition_insert(data[2])
				_elif what _is :update
				_then
					_self.note_cu_definition_update(data[2])
				_elif what _is :pre_delete
				_then
					_self.note_cu_definition_delete(data[2])
				_endif
			_endif
			
		_elif what _is :mode
		_then
			_self.manage_actions_for_mode_change()
		_endif 
	_endif 
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.note_cu_definition_insert(rec)
	## 
	## If the record REC passes the current filter, add it to the
	## CU list.
	##

	pred << _self.figure_filter_predicate()
	_if pred.test?(rec)
	_then
		sstr << {:value, :cu_code, :tab,
			 :value, :description}
		field_generator << handler.new(_self, :|field_accessor()|)
		dt << display_tree.new(rec, field_generator)
		dt.styled_string << sstr
		.cu_list.add(dt)

		_self.changed(:cu_list, :refresh)
	_endif 
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.note_cu_definition_update(rec)
	## 
	## Refresh the CU list when record REC is updated.
	##

	_self.changed(:cu_list, :refresh)
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.note_cu_definition_delete(rec)
	## 
	## When deleting a record, remove it from the CU list.
	##

	_if rec _is _unset _orif
	    _not rec.is_valid?
	_then
		# Shouldn't happen, but deal as best we can.
		_self.refresh()
		_return
	_endif

	any_change? << _false
	cul << .cu_list
	_for i _over cul.size.downto(1)
	_loop
		_if (test_rec << .cu_list[i].key).is_valid? _andif
		    test_rec = rec
		_then
			cul.remove_nth(i)
			any_change? << _true
		_endif
	_endloop

	_if any_change?
	_then 
		_self.changed(:cu_list, :refresh)
	_endif
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.cu_list_select(selection, user_sel?)
	## 
	## 

	_self.manage_actions_for_cu_list_selection()
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.cu_list_double_click(selection)
	## 
	## Activate the CU properties dialog when a CU definition is
	## double clicked.
	##

	_if (rec << selection.key) _isnt _unset _andif
	    rec.is_valid?
	_then
		_self.edit_selected_cu_properties(rec)
	_endif 
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.set_cu_list()
	## 
	## Build the list of CUs.
	##

	# Note: this is intentionally structured so that the sorter is
	# only used to build the cu_list initially - the cu_list itself
	# is just a rope, not a sorted collection.  This is done mainly
	# for performance reasons in cases where a very large list of
	# CUs may be displayed.
	sc << .sorter
	sc.empty()

	tbl << mss_cu_engine.view.collections[:mss_cu_definition]
	sstr << {:value, :cu_code, :tab,
		 :value, :description}
	field_generator << handler.new(_self, :|field_accessor()|)
	max_to_do << _self.max_to_report
	max_exceeded? << _false

	pred << _self.figure_filter_predicate()
	_for i _over tbl.select(pred).fast_elements()
	_loop
		_if (cu_code << i.cu_code) _is _unset
		_then
			_continue
		_endif
		_if sc.size >= max_to_do
		_then
			max_exceeded? << _true
			_leave
		_endif 
		sc.add({{mss_cu_holder.cu_code_sort_key(cu_code)}, i})
	_endloop

	cus << .cu_list
	cus.empty()
	_for i _over sc.fast_elements()
	_loop
		rec << i[2]
		dt << display_tree.new(rec, field_generator)
		dt.styled_string << sstr
		cus.add(dt)
	_endloop
	
	_self.changed(:cu_list, :refresh)
	_return .cu_list, max_exceeded?
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.perform_filter()
	## 
	## Perform filtering based on predicate entered.
	##

	_self.status_string << _self.message(:filtering)
	(new_list, max_exceeded?) << _self.set_cu_list()
	_if max_exceeded? _is _true
	_then 
		_self.status_string << _self.message(:filter_complete_max, .cu_list.size, .cu_list.size)
	_else
		_self.status_string << _self.message(:filter_complete, .cu_list.size)
	_endif 
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.set_proxy_actions_for_active_page(a_page, pl)
	## 
	## Set any proxy actions in property list PL when A_PAGE
	## becomes the current page on the main tab control.
	## 

	_if a_page _is .items[:top_panel]
	_then
		pl[:refresh] << _self.action(:refresh)
		pl[:edit_selected_cu_definition] << _self.action(:edit_selected_cu_definition)
		pl[:edit_selected_cu_properties] << _self.action(:edit_selected_cu_properties)
		pl[:clone_selected_cu_definition] << _self.action(:clone_selected_cu_definition)
	_endif 
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.selected_cu_definition
	## 
	## 

	_if (ti << .items[:cu_list]) _isnt _unset _andif 
	    (sel << ti.selection.an_element()) _isnt _unset
	_then
		rec << sel.key
		_if rec _isnt _unset _andif
		    _not rec.is_valid?
		_then
			rec << _unset
		_endif
		_return rec, sel
	_endif 
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.manage_actions_for_mode_change()
	## 
	## 

	_self.manage_actions_for_cu_list_selection()
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.manage_actions_for_cu_list_selection()
	## 
	## 

	w? << mss_cu_engine.view.writable?
	sel_cu << _self.selected_cu_definition
	
	_self.action(:edit_selected_cu_definition).enabled? << sel_cu _isnt _unset
	_self.action(:edit_selected_cu_properties).enabled? << sel_cu _isnt _unset
	_self.action(:clone_selected_cu_definition).enabled? << w? _andif sel_cu _isnt _unset
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.refresh()
	## 
	## Update all displayed lists.
	##

	# Remove deleted records from list.
	cul << .cu_list
	_for i _over cul.size.downto(1)
	_loop
		_if _not (test_rec << .cu_list[i].key).is_valid?
		_then
			cul.remove_nth(i)
		_endif
	_endloop

	_self.changed(:cu_list, :refresh)
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.edit_selected_cu_definition(_optional rec)
	## 
	## Activate the object editor for the selected CU definition.
	##

	_if rec _is _unset _andif
	    (rec << _self.selected_cu_definition) _is _unset
	_then
		_self.user_error(:no_selected_cu_definition)
	_endif
	_self.framework.activate_editor_for_object(rec)
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.edit_selected_cu_properties(_optional rec)
	## 
	## Activate the CU properties dialog for the selected CU
	## definition. 
	##

	_if rec _is _unset _andif
	    (rec << _self.selected_cu_definition) _is _unset
	_then
		_self.user_error(:no_selected_cu_definition)
	_endif

	_if (m << _self.get_dialog(:mss_cu_properties_dialog)) _is _unset
	_then
		m << mss_cu_properties_dialog.new()
		m.activate_relative_to(_unset, _self.top_frame, 50, 50)
		_self.cache_dialog(:mss_cu_properties_dialog, m)
	_else
		m.reactivate()
	_endif
	m.set_current_object(rec)
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_property_config_plugin.clone_selected_cu_definition(_optional rec)
	## 
	## Clone the selected CU definition record.
	##

	_dynamic !mss_cu_property_config_ignore_notification?! << _true
	
	_if rec _is _unset _andif
	    (rec << _self.selected_cu_definition) _is _unset
	_then
		_self.user_error(:no_selected_cu_definition)
	_endif

	dbv << rec.source_view
	ok? << dbv.start_lwt()
	_protect
		new_rec << rec.clone_with_substructure()
		u_msg << _self.message(:clone_selected_cu_definition)
		ok? << _true
	_protection
		dbv.end_lwt(ok?, _true, u_msg, property_list.new_with(:function, u_msg))
	_endprotect

	# Find the rec in the list, and add the cloned record right
	# after it.
	sstr << {:value, :cu_code, :tab,
		 :value, :description}
	field_generator << handler.new(_self, :|field_accessor()|)
	dt << display_tree.new(new_rec, field_generator)
	dt.styled_string << sstr
	found? << _false 
	_for i, j _over .cu_list.fast_keys_and_elements()
	_loop
		_if j.key.is_valid? _andif
		    j.key = rec
		_then
			found? << _true
			.cu_list.add_nth(dt, i + 1)
			_leave
		_endif
	_endloop
	_if _not found?
	_then
		.cu_list.add_last(dt)
	_endif

	_self.changed(:cu_list, :refresh)
	
_endmethod
$
