#% text_encoding = iso8859_1
_package user
# Copyright © 2004 Minto Spatial Solutions Ltd.
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the mss product
# directory, and is also available at http://www.fsf.org.

_pragma(classify_level=basic, topic={mss_cu})
##
## mss_cu_config_framework
##

def_slotted_exemplar(:mss_cu_config_framework,
{
	{:database, _unset, :readable},
	{:dummy_actions, _unset, :readable}
},
{:gui_framework})
$

_pragma(classify_level=restricted, topic={mss_cu})
##
## Defines the colour which is used to highlight geometry.
## Only needed for compatibility with editor_manager, which
## requires this property on its owning application.
##
mss_cu_config_framework.def_property(
	:highlight_colour,
	:type, :object,
	:default_value, colour.new_rgb(1.0, 1.0, 0.0),
	:readable?, _true,
	:writable?, _false)
$

_pragma(classify_level=restricted, topic={mss_cu})
mss_cu_config_framework.define_shared_constant(
	:databus_consumer_data_types,
	{:status_string},
	:public)
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_config_framework.init(_gather args)
	## 
	## 

	_super.init(_scatter args)

	soc_name << mss_cu_engine.spatial_object_controller_name
	.database << sw_database.new(soc_name, _self, :initial_soc_name, soc_name)
	
	.dummy_actions << property_list.new()
	_return _self
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_config_framework.spatial_object_controller
	## 
	## 

	_return _self.database
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_config_framework.init_actions()
	## 
	## 

	_self.add_action(_self.database.action(:undo))
	_self.add_action(_self.database.action(:redo))

	_self.add_action(sw_action.new(:close,
				       :engine, _self,
				       :action_message, :|close()|))
	_self.add_action(sw_action.new(:activate_cu_definition_editor,
				       :engine, _self,
				       :action_message, {:|activate_editor_for_table()|, :mss_cu_definition}))
	_self.add_action(sw_action.new(:activate_cu_group_definition_editor,
				       :engine, _self,
				       :action_message, {:|activate_editor_for_table()|, :mss_cu_group_definition}))
	_self.add_action(sw_action.new(:activate_cu_job_type_editor,
				       :engine, _self,
				       :action_message, {:|activate_editor_for_table()|, :mss_cu_job_type}))
	_self.add_action(sw_action.new(:activate_cu_cost_group_editor,
				       :engine, _self,
				       :action_message, {:|activate_editor_for_table()|, :mss_cu_cost_group}))

	# Proxy actions for cut/copy/paste, etc.
	_for i _over {:cut, :copy, :paste, :refresh,
		      :edit_selected_cu_definition,
		      :edit_selected_cu_properties,
		      :edit_selected_cu_group_definition,
		      :edit_selected_cu_job_type,
		      :edit_selected_cu_cost_group,
		      :clone_selected_cu_definition
	}.fast_elements()
	_loop 
		.dummy_actions[i] << sw_action.new(i,
						   :engine, _self,
						   :action_message, :|do_nothing()|,
						   :enabled?, _false)
		_self.add_action(action_proxy.new(.dummy_actions[i]))
	_endloop 
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_config_framework.post_build_gui()
	## 
	## 

	tb << _self.get_gui_element_with_role(:main_tab_box)
	tb.page_change_selector << :|set_current_main_tab()|
	_self.manage_proxy_actions()

	# Force versions to display system info, since there is no
	# options dialog to control that.
	versions << _self.plugin(:versions)
	pl << versions.get_preferences()
	pl[:show_system_info?] << _true
	versions.set_preferences(pl)
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_config_framework.sw_databus_data_available(data_type_name, data)
	## 
	## Update the status bar to indicate status messages from any
	## plugin.
	##

	_if data_type_name _is :status_string
	_then
		_self.status_string << data
	_endif
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_config_framework.popup_for_child(ti, menu_name)
	## 
	## Returns the popup menu as defined under the menu name
	## MENU_NAME in the gui_manager's definition file, parented to
	## the tree_item TI.
	##

	_return _self.gui_manager.popup_menu(ti, menu_name)
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_config_framework.set_current_main_tab(page_nr)
	## 
	## Handle changes to the current tab.
	##

	_self.manage_proxy_actions()
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_config_framework.manage_proxy_actions()
	## 
	## Based on the current tab, update proxy actions to represent
	## whatever is current.
	## 

	_handling component_no_such_action _with procedure
	
	_if (tb << _self.get_gui_element_with_role(:main_tab_box)) _is _unset
	_then
		_return
	_endif 

	# Let all components decide if they should be updating the
	# proxy actions with their own thing when the tab changes.
	new_actions << .dummy_actions.copy()

	_for i _over _self.components()
	_loop
		_if i.responds_to?(:|set_proxy_actions_for_active_page()|)
		_then
			i.set_proxy_actions_for_active_page(tb.active_page, new_actions)
		_endif
	_endloop

	_for i, j _over new_actions.fast_keys_and_elements()
	_loop
		_if (my_act << _self.action(i)) _isnt _unset
		_then 
			my_act.real_subject << j
		_endif 
	_endloop 
	
_endmethod
$

_pragma(classify_level=basic, topic={mss_cu})
_method mss_cu_config_framework.status_string << a_string
	## 
	## 

	_self.changed(:status_string, :text, a_string)
	
_endmethod
$

_pragma(classify_level=basic, topic={mss_cu})
_method mss_cu_config_framework.activate_editor_for_table(tbl_or_name)
	## 
	## Activate the editor for TBL_OR_NAME (either a database
	## table, or the name of one).
	##

	_if tbl_or_name.is_class_of?(symbol)
	_then
		tbl_or_name << mss_cu_engine.view.collections[tbl_or_name]
	_endif
	_return _self.get_service_provider(:editor_manager).edit_collection(tbl_or_name)
	
_endmethod
$

_pragma(classify_level=basic, topic={mss_cu})
_method mss_cu_config_framework.activate_editor_for_object(rec)
	## 
	## Activate the editor for REC.
	##

	_return _self.get_service_provider(:editor_manager).edit_object(rec)
	
_endmethod
$

_pragma(classify_level=basic, topic={mss_cu})
_method mss_cu_config_framework.ace
	## 
	## If self is not plugged into a higher level application, then
	## there is no ace available.
	##

	_if (app << _self.application) _is _self
	_then 
		_return _unset
	_endif
	_return app.ace
	
_endmethod
$

_pragma(classify_level=basic, topic={mss_cu})
_method mss_cu_config_framework.has_spatial_contexts_for?(an_object)
	## 
	## No spatial data is managed in the mss_config database.
	##

	_return _false
	
_endmethod
$

_pragma(classify_level=basic, topic={mss_cu})
_method mss_cu_config_framework.get_ace_control_for(ace_name)
	## 
	## Required for use by explorer, if self is the top-level
	## application.
	##

	_return .database.gs_factory.get_ace_control_for(ace_name)
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_config_framework.undo_manager
	## 
	## Return self's database as the manager for undo operations.
	##

	# N.B.: this method must exist, due to the assumption in core
	# method sw_database.note_change() that a sw_database's application
	# responds to undo_manager.
	_return .database
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_cu})
_method mss_cu_config_framework.in_swaf_environment?
	## 
	## Required by non-application things which have an
	## editor_manager.  Return true.
	##
	
	_return _true
	
_endmethod
$
