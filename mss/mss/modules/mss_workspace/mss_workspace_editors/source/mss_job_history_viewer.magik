#% text_encoding = iso8859_1
_package user
# Copyright © 2004 Minto Spatial Solutions Ltd.
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the mss product
# directory, and is also available at http://www.fsf.org.

_pragma(classify_level=basic, topic={mss_workspace})
##
## mss_job_history_viewer.magik
##
## Menu to display the history of a given job.
##

def_slotted_exemplar(:mss_job_history_viewer,
{
	{:current_object, _unset},
	{:sorter, _unset}
},
{:model})
$

_pragma(classify_level=basic, topic={mss_workspace}, usage={redefinable})
mss_job_history_viewer.define_shared_constant(
	:result_list_column_widths,
	## Column widths to use for result list.
	{50, 100, 100, 100, 80, 120},
	:public)
$

_pragma(classify_level=basic, topic={mss_workspace}, usage={redefinable})
_method mss_job_history_viewer.result_list_column_headings
	## 
	## Column headings to use for result list.
	## 

	_return {_self.message(:rch_action),
		 _self.message(:rch_name),
		 _self.message(:rch_type),
		 _self.message(:rch_status),
		 _self.message(:rch_last_update_user),
		 _self.message(:rch_last_update_time)}
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_workspace})
_method mss_job_history_viewer.init()
	## 
	## 

	_super.init()
	.current_object << _unset
	.sorter << sorted_collection.new(10, _proc(a, b)
						     v1 << a.value[:last_update_time]
						     v2 << b.value[:last_update_time]
						     _if v1 _is _unset
						     _then
							     _if v2 _is _unset
							     _then
								     _return _maybe
							     _else
								     _return _true
							     _endif
						     _elif v2 _is _unset
						     _then
							     _return _false
						     _endif 
						     _return v1 _cf v2
					 _endproc)
	_return _self
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_workspace})
_method mss_job_history_viewer.wm_close()
	## 
	## 

	_self.quit(_true)
	_return _true
	
_endmethod
$

_pragma(classify_level=basic, topic={mss_workspace})
_method mss_job_history_viewer.current_object
	## 
	## 

	_if (rec << .current_object) _isnt _unset _andif
	    _not rec.is_valid?
	_then
		rec << .current_object << _unset
	_endif
	_return rec
	
_endmethod
$

_pragma(classify_level=basic, topic={mss_workspace})
_method mss_job_history_viewer.current_object << rec
	## 
	## 

	_if rec _isnt _unset _andif
	    _not rec.is_valid?
	_then
		rec << _unset
	_endif
	.current_object << rec
	_self.changed(:current_object_string)
	_self.changed(:result_list, :refresh)
	_return rec
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_workspace})
_method mss_job_history_viewer.activate_in(f)
	## 
	## 

	p << panel.new(f)
	p.height_spacing << p.width_spacing << 6
	p.border_width << p.border_height << 2

	p.start_row()
	label_item.new(p, _self.current_object_string,
		       :model, _self,
		       :aspect, :current_object_string)

	p.start_row()
	tree_item.new(p,
		      :grid_lines?, _true,
		      :model, _self,
		      :aspect, :result_list,
		      :data_selector, :result_list,
		      :height_in_chars, 12,
		      :column_widths, _self.result_list_column_widths.copy(),
		      :column_headings, _self.result_list_column_headings.copy(),
		      :distribute_spare_width, :always,
		      :mode, :none,
		      :resize_x?, _true,
		      :resize_y?, _true)
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_workspace})
_method mss_job_history_viewer.current_object_string
	## 
	## 

	_if (rec << _self.current_object) _is _unset
	_then
		_return _self.message(:no_current_object)
	_else
		_return _self.message(:current_object_string, _unset, rec.short_description)
	_endif
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_workspace})
_method mss_job_history_viewer.note_change(who, what, data)
	## 
	## 

	_if what _is :current_object
	_then
		_self.current_object << data
	_endif
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_workspace})
_method mss_job_history_viewer.result_list
	## 
	## Return a list of history records.
	##

	sc << .sorter
	sc.empty()
	_if (rec << _self.current_object) _is _unset
	_then
		_return sc
	_endif
	_for hist_rec _over rec.history_records.fast_elements()
	_loop
		_if (act_val << hist_rec.operation) = 1
		_then
			act_str << _self.message(:action_insert)
		_elif act_val = 2
		_then
			act_str << _self.message(:action_update)
		_elif act_val = 3
		_then
			act_str << _self.message(:action_delete)
		_else
			act_str << _unset
		_endif
		
		pl << property_list.new_with(
			      :last_update_time, hist_rec.last_update_time,
			      :last_update_user, hist_rec.last_update_user,
			      :action, act_str)
		_self.set_result_list_attributes(pl, hist_rec)
		dt << display_tree.new(hist_rec.id, pl)
		dt.styled_string << _self.result_list_styled_string(dt)
		sc.add(dt)
	_endloop 

	_return sc
	
_endmethod
$

_pragma(classify_level=basic, topic={mss_workspace}, usage={redefinable})
_method mss_job_history_viewer.result_list_styled_string(disp_tree)
	##
	## The styled_string to use for displaying data in the result list.
	##
	
	_return styled_string.new(:value, :action, :tab,
				  :value, :name, :tab,
				  :value, :type, :tab,
				  :value, :status, :tab,
				  :value, :last_update_user, :tab,
				  :value, :last_update_time)
	
_endmethod 
$

_pragma(classify_level=advanced, topic={mss_workspace}, usage={redefinable})
_method mss_job_history_viewer.set_result_list_attributes(pl, hist_rec)
	##
	## Set the attributes for displaying the search result for
	## history record HIST_REC.  PL is the property list in which
	## to store the attributes. 
	##
	## This may be redefined, in conjunction with result_list_styled_string(),
	## result_list_column_widths, and result_list_column_headings.
	##

	pl[:name] << hist_rec.name
	pl[:type] << hist_rec.type
	pl[:status] << hist_rec.status
	_return pl
	
_endmethod
$
