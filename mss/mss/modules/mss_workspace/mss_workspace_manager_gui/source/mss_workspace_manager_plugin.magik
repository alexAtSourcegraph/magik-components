#% text_encoding = iso8859_1
_package user
# Copyright © 2004 Minto Spatial Solutions Ltd.
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the mss product
# directory, and is also available at http://www.fsf.org.

_pragma(classify_level=basic, topic={mss_workspace})
##
## mss_workspace_manager_plugin
##
## Plugin for providing access to various MSS workspace
## functions. 
##

def_slotted_exemplar(:mss_workspace_manager_plugin,
{
	{:owning_application, _unset}
},
{:plugin})
$

_pragma(classify_level=basic, topic={mss_workspace})
## Name of the gui definition file.  Defaults to "gui.xml".
mss_workspace_manager_plugin.define_property(
	:gui_definition_file_name,
	:string,
	"Name of the gui definition file",
	_false, _false, "gui.xml")
$

_pragma(classify_level=basic, topic={mss_workspace})
## Name of the module in which the gui definition is located.
mss_workspace_manager_plugin.define_property(
	:gui_definition_module_name,
	:string,
	"Name of module in which gui definition is located")
$

_pragma(classify_level=basic, topic={mss_workspace})
## Name of the config definition file.  Defaults to "config.xml".
mss_workspace_manager_plugin.define_property(
	:config_definition_file_name,
	:string,
	"Name of the config definition file",
	_false, _false, "config.xml")
$

_pragma(classify_level=basic, topic={mss_workspace})
## Name of the module in which the config definition is located.
mss_workspace_manager_plugin.define_property(
	:config_definition_module_name,
	:string,
	"Name of module in which config definition is located")
$

_pragma(classify_level=basic, topic={mss_workspace})
_method mss_workspace_manager_plugin.gui_definition_module_name
	## 
	## Use property (if defined), otherwise just use module name.
	##

	_return _self.property(:gui_definition_module_name).default(_self.module_name)
	
_endmethod
$

_pragma(classify_level=basic, topic={mss_workspace})
_method mss_workspace_manager_plugin.config_definition_module_name
	## 
	## Use property (if defined), otherwise just use module name.
	##

	_return _self.property(:config_definition_module_name).default(_self.module_name)
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_workspace})
_method mss_workspace_manager_plugin.pre_activation()
	## 
	## 

	mss_workspace_manager_engine.add_dependent(_self, :active_design, :active_design_mode)
	mss_workspace_manager_engine.view.add_dependent(_self, :view)
	mss_workspace_manager_engine.view.add_observer(_self, {:update},
						       {:mss_job, :mss_design})
	_super.pre_activation()

	_if (app << _self.application) _isnt _unset _andif
	    app.is_kind_of?(application)
	_then
		.owning_application << app
		_self.set_application_title()
	_endif

	# If there is no active design, and if no managed database
	# alternatives are writable, then move to the default
	# design-top alternatives.  This is done cautiously - even if
	# there is no active design, if there is a writable database
	# alternative, then the user probably intended to do that, and
	# they possibly did it in a different application, so don't
	# step on anyone's toes.
	_if (wme << mss_workspace_manager_engine).active_design _is _unset
	_then
		any_writable? << _false
		_for ds_name _over wme.root_alternative_name_for_view_name.fast_keys_and_elements()
		_loop
			_if (dbv << gis_program_manager.cached_dataset(ds_name)) _isnt _unset _andif
			    dbv.writable?
			_then
				any_writable? << _true
				_leave
			_endif
		_endloop
		_if _not any_writable?
		_then
			wme.close_design()
		_endif
	_endif
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_workspace})
_method mss_workspace_manager_plugin.terminate()
	## 
	## 

	mss_workspace_manager_engine.remove_dependent(_self, :active_design, :active_design_mode)
	mss_workspace_manager_engine.view.remove_dependent(_self, :view)
	mss_workspace_manager_engine.view.remove_observer(_self, {:update},
							  {:mss_job, :mss_design})
	_super.terminate()
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_workspace})
_method mss_workspace_manager_plugin.note_change(who, what, _gather data)
	## 
	## 

	_if who _is mss_workspace_manager_engine
	_then
		_if what _is :active_design _orif
		    what _is :active_design_mode
		_then
			_self.set_application_title()
		_endif

	_elif who _is mss_workspace_manager_engine.view
	_then
		_if {:insert, :update, :pre_delete}.includes?(what)
		_then
			tbl << data[1]
			data_rec << data[2]
			_if (ad << mss_workspace_manager_engine.active_design) _isnt _unset _andif
			    (ad = data_rec _orif ad.mss_job = data_rec)
			_then
				_self.set_application_title()
			_endif
		_elif what _is :view
		_then
			_self.set_application_title()
		_endif
	_endif
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_workspace})
_method mss_workspace_manager_plugin.init_actions()
	## 
	## 

	_self.add_action(sw_action.new(:activate_mss_workspace_manager_framework,
				       :engine, _self,
				       :action_message, :|activate_mss_workspace_manager_framework()|))
	
_endmethod
$

_pragma(classify_level=restricted, topic={mss_workspace})
_method mss_workspace_manager_plugin.activate_mss_workspace_manager_framework()
	##
	## Activate the mss_workspace_manager_framework menu.
	##

	_if (m << _self.get_dialog(:mss_workspace_manager_framework)) _is _unset
	_then
		m << mss_workspace_manager_framework.new(
			     :mss_workspace_manager_framework, _self,
			     :config_definition_module_name, _self.config_definition_module_name,
			     :config_definition_file_name, _self.config_definition_file_name,
			     :gui_definition_module_name, _self.gui_definition_module_name,
			     :gui_definition_file_name, _self.gui_definition_file_name)
		_self.cache_dialog(:mss_workspace_manager_framework, m)
		m.activate_relative_to(_unset, m.message(:title), _self.top_frame, 50, 50)
	_else 
		m.activate(_unset, m.message(:title))
	_endif
	m.top_frame.minimized? << _false

_endmethod
$

_pragma(classify_level=restricted, topic={mss_workspace})
_method mss_workspace_manager_plugin.set_application_title()
	## 
	## 

	_if .owning_application _is _unset
	_then
		_return
	_endif
	_if (ad << mss_workspace_manager_engine.active_design) _is _unset
	_then
		title << _self.message(:no_active_design, .owning_application.external_name)
	_else 
		title << _self.message(:active_design, .owning_application.external_name,
				       ad.job_and_design_full_name,
				       ad.status,
				       mss_workspace_manager_engine.active_design_mode)
	_endif 
	.owning_application.application_title << title
	
_endmethod
$
