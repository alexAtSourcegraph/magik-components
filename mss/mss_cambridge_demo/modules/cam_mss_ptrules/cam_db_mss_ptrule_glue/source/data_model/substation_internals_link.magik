#% text_encoding = iso8859_1
_package user
# Copyright © 2004 Minto Spatial Solutions Ltd.
#
# This software is released under the terms of version 2 of the
# GNU General Public License.  The full license text is
# provided in the license.txt file in the mss product
# directory, and is also available at http://www.fsf.org.

_pragma(classify_level=advanced, topic={mss_ptrule})
substation_internals_link.define_shared_constant(
	:mss_ptrule_pin_1_name,
	## Name of first pin geometry (for two-pin RWOs such as switch
	## or transformer).
	:internal_pin,
	:public)
$
				  
_pragma(classify_level=advanced, topic={mss_ptrule})
substation_internals_link.define_shared_constant(
	:mss_ptrule_pin_2_name,
	## Name of second pin geometry (for two-pin RWOs such as switch
	## or transformer).
	:external_pin,
	:public)
$
				  
_pragma(classify_level=advanced, topic={mss_ptrule})
_method substation_internals_link.mss_ptrule_ok_for_correlation?(cat, corr_geom, ptrule)
	## 
	## Allow snapping to a any cable.
	##

	_if (corr_rwo << corr_geom.rwo) _isnt _unset _andif
	    {:busbar, :internal_cable, :cable}.includes?(corr_rwo.source_collection.name) _andif
	    corr_geom.geom_category _is :linear
	_then
		_return _true
	_endif
	_return _false
	
_endmethod
$

_pragma(classify_level=advanced, topic={mss_ptrule})
_method substation_internals_link.mss_ptrule_update_from_correlation(cat, corr_geom, ptrule)
	## 
	## Update self's attributes from correlated feature.
	##

	_if (corr_rwo << corr_geom.rwo) _isnt _unset _andif
	    {:busbar, :internal_cable, :cable}.includes?(corr_rwo.source_collection.name)
	_then
		voltage << corr_rwo.voltage
		_if ptrule.user_data[:primary_connection] _is _unset
		_then
			_self.voltage << voltage
		_endif
	_endif 
		
_endmethod
$

_pragma(classify_level=advanced, topic={mss_ptrule})
_method substation_internals_link.mss_set_substation_internals(ptrule, a_window, coord)
	## 
	## Instead of actually setting a join to a substation_internals
	## record, validate that the first pointing is in an internals,
	## and the second pointing is in the GIS world.
	##

	a_map_view << a_window.user_data
	ds_world << a_map_view.world.world_for_dataset(_self.source_view)
	_if ds_world _is _unset
	_then
		condition.raise(:user_error, :string, "What world are you pointing in, exactly?")
	_endif

	uid << ds_world.universe_id
	_if ptrule.user_data[:primary_connection] _is _unset
	_then
		# First pointing - must be in a non-zero universe.
		_if uid = 0
		_then
			condition.raise(:user_error, :string,
					"The first pointing must be to a cable in the substation internals view.")
		_endif
	_else
		# Second pointing - must be in the GIS universe.
		_if uid ~= 0
		_then
			condition.raise(:user_error, :string,
					"The second pointing must be to a cable in the geographic view.")
		_endif
	_endif
	
_endmethod
$
